[{"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/index.js":"1","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/reportWebVitals.js":"2","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/App.js":"3","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/ExecQueryBindingVarTable.js":"4","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/SearchLabelForm.js":"5","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/RetrievedDatasetVarTable.js":"6","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/EndpointsCheckBox.js":"7","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/LinkedSearchDatasetVarTable.js":"8","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/LinkedSearchVarTableList.js":"9","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/NetworkDiagram.jsx":"10","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/drawNetwork.js":"11","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/data.js":"12","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedGraph.js":"13","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/drawNetwork.js":"14","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedSVGGraph.js":"15","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/ExplainedDatasetDiscovery.js":"16","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/ForceUndirectedD3Graph.js":"17","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedSVGGraph_v2.js":"18","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/index.js":"19","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/App.js":"20","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/LinkedSearchVarTableList.js":"21","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/SearchLabelForm.js":"22","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedSVGGraph.js":"23","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedGraph.js":"24","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/EndpointsCheckBox.js":"25","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/ExplainedDatasetDiscovery.js":"26","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/bindingVarTable/RetrievedDatasetVarTable.js":"27","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedSVGGraph_v2.js":"28","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/NetworkDiagram.jsx":"29","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/data.js":"30","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/drawNetwork.js":"31","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/ForceUndirectedD3Graph.js":"32","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/bindingVarTable/LinkedSearchDatasetVarTable.js":"33","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/drawNetwork.js":"34"},{"size":600,"mtime":1695323330328,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":1694677749973,"results":"37","hashOfConfig":"38"},{"size":3804,"mtime":1707386580980,"results":"39","hashOfConfig":"36"},{"size":4388,"mtime":1696464271518,"results":"40","hashOfConfig":"38"},{"size":3879,"mtime":1703153159079,"results":"41","hashOfConfig":"36"},{"size":7139,"mtime":1703153700711,"results":"42","hashOfConfig":"36"},{"size":12743,"mtime":1701973124976,"results":"43","hashOfConfig":"36"},{"size":5030,"mtime":1698922914924,"results":"44","hashOfConfig":"36"},{"size":9013,"mtime":1698921565732,"results":"45","hashOfConfig":"36"},{"size":1771,"mtime":1699954657376,"results":"46","hashOfConfig":"36"},{"size":690,"mtime":1699001498416,"results":"47","hashOfConfig":"36"},{"size":2097,"mtime":1699001687312,"results":"48","hashOfConfig":"36"},{"size":11432,"mtime":1700437788936,"results":"49","hashOfConfig":"36"},{"size":690,"mtime":1699926498828,"results":"50","hashOfConfig":"36"},{"size":17720,"mtime":1700619461100,"results":"51","hashOfConfig":"36"},{"size":9999,"mtime":1700515938433,"results":"52","hashOfConfig":"36"},{"size":4791,"mtime":1700516120949,"results":"53","hashOfConfig":"36"},{"size":45460,"mtime":1703148222555,"results":"54","hashOfConfig":"36"},{"size":600,"mtime":1695323330328,"results":"55","hashOfConfig":"56"},{"size":3803,"mtime":1707398321820,"results":"57","hashOfConfig":"56"},{"size":9013,"mtime":1698921565732,"results":"58","hashOfConfig":"56"},{"size":3879,"mtime":1703153159079,"results":"59","hashOfConfig":"56"},{"size":17720,"mtime":1700619461100,"results":"60","hashOfConfig":"56"},{"size":11432,"mtime":1700437788936,"results":"61","hashOfConfig":"56"},{"size":12743,"mtime":1701973124976,"results":"62","hashOfConfig":"56"},{"size":9999,"mtime":1700515938433,"results":"63","hashOfConfig":"56"},{"size":7139,"mtime":1703153700711,"results":"64","hashOfConfig":"56"},{"size":45460,"mtime":1703148222555,"results":"65","hashOfConfig":"56"},{"size":1771,"mtime":1699954657376,"results":"66","hashOfConfig":"56"},{"size":2097,"mtime":1699001687312,"results":"67","hashOfConfig":"56"},{"size":690,"mtime":1699926498828,"results":"68","hashOfConfig":"56"},{"size":4791,"mtime":1700516120949,"results":"69","hashOfConfig":"56"},{"size":5030,"mtime":1698922914924,"results":"70","hashOfConfig":"56"},{"size":690,"mtime":1699001498416,"results":"71","hashOfConfig":"56"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nix3kc",{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"16utomw",{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17q6329",{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/index.js",[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/reportWebVitals.js",[],[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/App.js",["186","187","188","189","190","191","192","193","194","195","196"],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/ExecQueryBindingVarTable.js",["197","198"],[],"import {useState,useEffect} from 'react'\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport default function ExecQueryBindingVarTable(){\n\n    const endpoint_uri = 'http://13.38.36.148:8080/rdf4j-server/repositories/ucmm_instance_graph';\n    \n    // const [varNames,setVarNames] = useState([\"s\",\"p\",\"o\"]);\n    // const [bindings, setBindings] = useState([\n    //     {s:{value: 's1'},p:{value: 'p1'},o:{value:'o1'}},\n    //     {s:{value: 's2'},p:{value: 'p2'},o:{value:'o2'}}\n    // ]);\n\n    const [varNames,setVarNames] = useState([]);\n    const [bindings, setBindings] = useState([]);\n\n    const [queryTxt, setQueryTxt] = useState(\n        \"SELECT * WHERE { ?s ?p ?o.  } limit 10\"\n    );\n\n    async function  fetchData (url, d )  {\n        try {  \n            const response = await fetch(url,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                     \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ d.replaceAll('\\n',' ')\n            }\n            )            \n            \n            \n            const jsonData = await response.json();\n            \n            console.log('jsonData:', jsonData);\n            \n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        setBindings(jsonData.results.bindings);\n                    }}\n\n                if(jsonData.head){\n                    if(jsonData.head.vars){\n                        setVarNames(jsonData.head.vars);\n                    }\n                }\n                \n            }\n\n            console.log('varNames:', varNames); \n            console.log('bindings:', bindings);\n\n            // console.log('bindings[0][s][\"value\"]: ', bindings[0][varNames[0]][\"value\"]);\n\n            // bindings.map(binding =>\n            //     varNames.map(varName => {\n            //         console.log(\"<td> \", binding[varName][\"value\"], \" </td>\")\n            //         })\n            // )\n\n        } catch (error) {\n            console.log('Error:', error);\n            \n        }\n    }\n\n    useEffect (\n         () =>{\n             const resp =  fetchData(endpoint_uri, queryTxt);\n        },\n        []\n    );\n\n    function handleButtonClick(){\n      fetchData(endpoint_uri, queryTxt).then( response => { console.log(response)});\n    }\n\n    function execQuery(){\n        return(\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>{\"Query: \"}</InputGroup.Text>\n                <Form.Control \n                    as=\"textarea\" \n                    rows=\"3\"\n                    type='text'\n                    placeholder={queryTxt}\n                    value={queryTxt} \n                    onChange={e =>setQueryTxt(e.target.value)}\n                    />\n                <Button variant=\"outline-secondary\" id=\"button-addon\" onClick={handleButtonClick}>\n                execute query\n                </Button> \n            </InputGroup> \n        );\n    }\n\n    return(\n        <>\n            <div>\n                {execQuery()}\n            </div>\n            <div>\n                {/* {varNames ?( */}\n                    <Table striped bordered hover responsive size='lg' >\n                        <thead >\n                            <tr text-align=\"center\">\n                                {varNames.map(v => <th> {v} </th> )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {bindings.map(binding =>\n                                <tr>\n                                    {varNames.map(varName => \n                                        <td> {binding[varName][\"value\"]} </td>\n                                    )}\n                                </tr>\n                            )}\n                        </tbody>\n\n                    </Table>\n                {/* ):(\n                    <p> Data not yet available ... </p>\n                )} */}\n            </div>\n        </>\n    )\n}\n","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/SearchLabelForm.js",["199","200"],[],"import {useState,useEffect} from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Card } from 'react-bootstrap';\n\nexport default function SearchLabelForm({kbUri,updateCallBack}){\n\n    const [searchLabel, setSearchLabel] = useState(''); \n\n    const [storedLabels,setStoredLabels] = useState([]);\n\n    const [dataLoaded, setDataLoaded] = useState(false);\n\n    async function  fetchStoredLabels ( )  {\n        try { \n\n            if(dataLoaded)\n                return;\n\n            const queryTxt = \n                'PREFIX skos: <http://www.w3.org/2004/02/skos/core#> '\n                +'SELECT DISTINCT ?storedLabel WHERE {?concept skos:prefLabel ?storedLabel }'\n\n            const endpoint_uri = kbUri;\n\n            const response = await fetch(endpoint_uri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                     \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt.replaceAll('\\n',' ')\n            }\n            )            \n            \n            const jsonData = await response.json();\n                        \n            if(jsonData){\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        \n                        setDataLoaded(true);\n                        setStoredLabels(jsonData.results.bindings);\n\n                        // console.log('jsonData.results.bindings',jsonData.results.bindings);\n                    }\n                }\n                \n            }\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n\n    function handleSearchClick(){\n        updateCallBack(searchLabel);\n        console.log('update Search Label call back',searchLabel);\n    }\n\n\n    useEffect (\n        () =>{\n            fetchStoredLabels();\n       },[dataLoaded] \n   );\n\n   \n    return (\n        dataLoaded?(\n            <Card>\n                <Card.Header>Search</Card.Header>\n                <Card.Body>\n                <InputGroup className=\"mb-3\">\n                        <InputGroup.Text id='searchLabelInputGroup'>{\"Label :\"}</InputGroup.Text>\n                        <Form.Control \n                            \n                            id='search label'\n                            placeholder='Type a label'\n                            aria-aria-label='search label'\n                            aria-describedby='searchLabelInputGroup'\n                            \n                            // autoComplete='on'\n                            // data = {['un','deux','trois']}\n                            list='storeLabelListOption'\n                            value={searchLabel} \n                            onChange={e =>setSearchLabel(e.target.value)}\n                        />\n                        <datalist id = 'storeLabelListOption'>\n                            {\n                            storedLabels.map( binding => \n                                <option >{binding.storedLabel.value}</option>\n                            )}\n                        </datalist>\n\n                </InputGroup>\n                <p>{'  Selected : '+searchLabel}</p>\n                <div class=\"d-grid gap-2\">\n                    <Button size=\"lg\" variant=\"outline-secondary\" id=\"button-search\"  onClick={handleSearchClick}>\n                        Retrieve Datasets\n                    </Button>\n                </div>\n                </Card.Body>\n            </Card>\n        ):(\n            <p>loading ... </p>\n        )\n    )\n    \n}\n","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/RetrievedDatasetVarTable.js",["201","202","203"],[],"import {useState,useEffect} from 'react'\nimport Table from 'react-bootstrap/Table';\nimport { Card } from 'react-bootstrap';\n\nexport default function RetrievedDatasetVarTable({selectedLabel, kbUri}){\n\n    \n    const prefix2uri = {\n        'skos:':'http://www.w3.org/2004/02/skos/core#',\n        'sosa:': 'http://www.w3.org/ns/sosa/',\n        'ucmm:':'http://purl.org/ucmm#',\n        'rdf:': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'dcat:':'http://www.w3.org/ns/dcat#',\n        'dcterms:':'http://purl.org/dc/terms/',\n        'cpm:':  'http://purl.org/voc/cpm#' ,\n        'geo:': 'http://www.opengis.net/ont/geosparql#',\n        'ssn-ext:': 'http://www.w3.org/ns/ssn/ext/' ,\n        'time:':  'http://www.w3.org/2006/time#',\n        'xsd:':  'http://www.w3.org/2001/XMLSchema#',\n\n        'i1:':'http://example.org/b2a5ed57-5c4e-4596-b803-d2ac7f5b9991#',\n        'i2:':'http://example.org/51824c86-ae0f-442f-9df2-e86244984ba3#',\n        'i3:':'http://example.org/97b4842b-94b3-4205-8781-476813d8177b#',\n        'i4:':'http://example.org/e747d804-a5d1-4fd1-bd9b-306a8ebd4904#',\n        'i5:': 'http://example.org/de5b570a-b560-4e84-a755-52c2aa499874#',\n        'i6:': 'http://example.org/3df904de-e47d-4bf9-85a0-7c0942aff8b6#',\n        'i7:': 'http://example.org/BDML_TCHR#',\n        'i8:': 'http://example.org/4f676524-a831-41fe-9afb-d95f4e7597e3#',\n        'i9:': 'http://example.org/f4968943-ad6f-4563-a737-58fe3285fb3c#',\n        'i10:': 'http://example.org/17e24931-ccd6-4de0-a01c-9ffb3be88461#'\n    };\n\n    function getPrefixFromUri(resourceUri){\n\n        // console.log(`getPrefixFromUri(resourceUri: ', ${resourceUri})`);\n\n        let prefix = '';\n        Object.entries(prefix2uri).map( ([prefixKey,uri]) => {\n            if(resourceUri.includes(uri)){\n                // console.log(` resourceUri.includes(${uri})`);\n                prefix = prefixKey;\n                return; // exit map function\n            }\n        })\n\n        // console.log(` prefix: ', ${prefix}`);\n\n        return prefix;\n    }\n    \n    function getPrefixedUri(resourceUri){\n\n        // console.log(`getPrefixedUri(resourceUri: ', ${resourceUri})`);\n\n        const prefix = getPrefixFromUri(resourceUri);\n\n        if(prefix==='')\n            return resourceUri;\n\n        const prefixUri = prefix2uri[prefix];\n        const prefixedUri = resourceUri.replace(prefixUri,prefix);\n\n         console.log(` prefixedUri: ', ${prefixedUri}`);\n\n        return prefixedUri;\n    }\n\n\n    const [varNames,setVarNames] = useState([]);\n    const [bindings, setBindings] = useState([]);\n\n    \n    function composeQuery(){\n        return ` \n            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n            PREFIX sosa: <http://www.w3.org/ns/sosa/> \n            PREFIX ucmm: <http://purl.org/ucmm#> \n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n            PREFIX dcat: <http://www.w3.org/ns/dcat#> \n            PREFIX dcterms: <http://purl.org/dc/terms/> \n            SELECT DISTINCT ?dataset \n            WHERE{ \n              { \n                ?dataset rdf:type dcat:Dataset . \n                ?dataset ?p ?concept .  \n                ?concept skos:prefLabel ?searchLabel .  \n              }UNION{ \n                ?dataset rdf:type dcat:Dataset . \n                ?dataset dcterms:description|dcterms:title|dcat:keyword ?searchLabel.  \n              }UNION{ \n                ?dataset rdf:type dcat:Dataset . \n                ?obsColl ucmm:hasAggregatedResult ?dataset . \n                ?obsColl rdf:type sosa:ObservationCollection .\n                ?obsColl  ?obsCollProp ?concept. \n                ?concept skos:prefLabel ?searchLabel . \n              }UNION{ \n                ?obsColl  (^sosa:hasMember)%2B ?obsCollParent.\n                ?obsColl  ?obsCollProp ?concept. \n                ?concept skos:prefLabel ?searchLabel .\n                OPTIONAL{\n                    ?dataset rdf:type dcat:Dataset . \n                    ?obsCollParent ucmm:hasAggregatedResult ?dataset . \n                }\n              }\n              FILTER (strlen(str(?dataset)) > 0)\n              FILTER (regex(?searchLabel,\"${selectedLabel}\",\"i\") )\n              FILTER (lang(?searchLabel)=\"en\")\n            }`.toString().replace('\\n',' ');\n    }\n\n    async function fetchData ()   {\n\n        try {  \n\n            console.log('kbUri : ',kbUri);\n            console.log('selectedLabel : ',selectedLabel);\n\n            console.log('composeQuery : ',composeQuery());\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ composeQuery()\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log('jsonData:', jsonData);\n            \n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        setBindings(jsonData.results.bindings);\n                    }}\n\n                if(jsonData.head){\n                    if(jsonData.head.vars){\n                        setVarNames(jsonData.head.vars);\n                    }\n                }\n                \n            }\n\n            // console.log('varNames:', varNames); \n            // console.log('bindings:', bindings);\n\n        } catch (error) {\n            console.log('Error:', error);\n            \n        }\n    }\n\n    useEffect (\n         () =>{\n            if(selectedLabel !== ''){\n                fetchData();\n            }\n        },\n        [selectedLabel]\n    );\n\n \n    return(\n        <Card>\n            {varNames.length>0 ?(\n                <>\n                    <Card.Header>\n                    {selectedLabel} \n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover responsive size='lg' >\n                            <thead >\n                                <tr text-align=\"center\">\n                                    {varNames.map(v => <th> {`${v}(s)`} </th> )}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {bindings.map(binding =>\n                                    <tr>\n                                        {varNames.map(varName => \n                                            <td> {getPrefixedUri(binding[varName][\"value\"])} </td>\n                                        )}\n                                    </tr>\n                                )}\n                            </tbody>\n                        </Table>\n                    </Card.Body> \n                </>\n            ):(\n                <p> {` Enter a search label and press the button: Retrieve Datasets `}  </p>\n            )}\n        </Card>  \n    )\n}\n","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/EndpointsCheckBox.js",["204","205","206","207","208","209","210"],[],"import { useState,useEffect } from \"react\";\nimport Form  from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Card  from \"react-bootstrap/Card\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Modal  from \"react-bootstrap/Modal\";\n\nexport default function EndpointsCheckBox({rdf4jRepositories,searchLabel, setLinkedConceptMapCallBack}){\n\n    const [endpoints, setEndpoints] = useState({\n        agrovoc:{\n            name:'AGROVOC',\n            uri: rdf4jRepositories+'agrovoc',\n            enabledEndpoint :false,\n            enabledPropertyCategories:{\n                narrower : false,\n                broader : false\n            }\n        },gcmd:{\n            name:'GCMD',\n            uri: rdf4jRepositories+'gcmd',\n            enabledEndpoint :false,\n            enabledPropertyCategories:{\n                narrower : false,\n                broader : false\n            }\n        }\n    });\n\n    const [linkedConceptMap,setLinkedConceptMap]=useState({\n        agrovoc:{\n            narrower :{\n                sourceUris:[],\n                sourceLabels:[],\n                propertyUris: [],\n                targetUris:[],\n                targetLabels:[],\n                endpointUri: rdf4jRepositories+'agrovoc'\n            },\n            broader :{\n                sourceUris:[],\n                sourceLabels:[],\n                propertyUris: [],\n                targetUris:[],\n                targetLabels:[],\n                endpointUri: rdf4jRepositories+'agrovoc'\n            }\n        },\n        gcmd:{\n            narrower :{\n                sourceUris:[],\n                sourceLabels:[],\n                propertyUris: [],\n                targetUris:[],\n                targetLabels:[],\n                endpointUri: rdf4jRepositories+'gcmd'\n            },\n            broader :{\n                sourceUris:[],\n                sourceLabels:[],\n                propertyUris: [],\n                targetUris:[],\n                targetLabels:[],\n                endpointUri: rdf4jRepositories+'gcmd'\n            }\n        },\n    })\n\n\n    const [showModal,setShowModal]=useState(false);\n\n\n    useEffect (\n        () =>{\n           if(searchLabel !== ''){\n                Object.entries(endpoints).map( ([endpointKey, endpointProps]) => {\n                    Object.entries(endpoints[endpointKey]['enabledPropertyCategories']).map(([propCategory, enabledPropCategory ])=>{\n                        if(enabledPropCategory){\n                            fetchLinkedConcepts(endpointKey,propCategory);\n                        }\n                    } )\n            })\n           }\n       },\n       [searchLabel]\n   );\n\n\n    function getSkosPropUris(propCategory){\n        switch(propCategory){\n            case 'narrower' : return ['http://www.w3.org/2004/02/skos/core#narrower','http://www.w3.org/2008/05/skos#narrower','http://www.w3.org/2004/02/skos/core#narrowerTransitive','http://www.w3.org/2008/05/skos#narrowerTransitive'];\n            case 'broader' : return ['http://www.w3.org/2004/02/skos/core#broader','http://www.w3.org/2008/05/skos#broader','http://www.w3.org/2004/02/skos/core#broaderTransitive','http://www.w3.org/2008/05/skos#broaderTransitive'];\n            default :return [];\n        }\n    }\n\n    function propUriBelongsToPropCategory (propUri,propCategory){\n        // console.log('propUriBelongsToPropCategory',propUri,propCategory)\n\n        let propUriBelongsToCategory = false;\n        getSkosPropUris(propCategory).map(p => {if(p===propUri){propUriBelongsToCategory= true; return true;}});\n\n        // console.log('propUriBelongsToCategory',propUriBelongsToCategory);\n        return propUriBelongsToCategory;\n    }\n\n    async function  fetchLinkedConcepts ( endpointKey,propCategory)  {\n        try { \n \n            console.log(\"fetchLinkedConcepts: \"+endpointKey, propCategory, searchLabel);\n\n            const queryTxt = \n                'PREFIX skos: <http://www.w3.org/2004/02/skos/core#> '+\n                'SELECT DISTINCT ?searchConceptUri ?searchConceptLabel ?linkedPropertyUri ?linkedConceptUri ?linkedConceptLabel  '+\n                'WHERE { '+\n                ' ?searchConceptUri skos:prefLabel ?searchConceptLabel. '+\n                ' ?searchConceptUri ?linkedPropertyUri ?linkedConceptUri. '+\n                ' ?linkedConceptUri skos:prefLabel ?linkedConceptLabel. '+\n                '  FILTER (regex(?searchConceptLabel,\"^'+searchLabel+'$\",\"i\") )'+\n                '  FILTER (lang(?searchConceptLabel)=\"en\")'+\n                '  FILTER (lang(?linkedConceptLabel)=\"en\")'+\n                '}';\n\n            console.log('queryTxt',queryTxt);\n \n\n            const endpoint_uri = endpoints[endpointKey]['uri'];\n\n            setShowModal(true);\n            const response = await fetch(endpoint_uri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                mode: \"no-cors\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                     \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n\n            const jsonData = await response.json();\n\n            setShowModal(false);\n\n            console.log(' jsonData: ', jsonData);\n\n            \n            const retrievedSearchConceptUris =[];\n            const retrievedSearchConceptLabels =[];\n            const retrievedLinkedConceptUris =[];\n            const retrievedLinkedConceptLabels =[];\n            const retrievedLinkedPropertyUris =[]; \n\n            \n\n            if(jsonData){\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n\n                        jsonData.results.bindings.map( binding => {\n                            \n                            // ?searchConceptUri ?searchConceptLabel ?linkedPropertyUri ?linkedConceptUri ?linkedConceptLabel \n\n                            if(propUriBelongsToPropCategory(binding['linkedPropertyUri']['value'],propCategory)){\n                            \n                                retrievedSearchConceptUris.push(binding['searchConceptUri']['value']);\n                                retrievedSearchConceptLabels.push(binding['searchConceptLabel']['value']);\n                                retrievedLinkedPropertyUris.push(binding['linkedPropertyUri']['value']);\n                                retrievedLinkedConceptUris.push(binding['linkedConceptUri']['value']);\n                                retrievedLinkedConceptLabels.push(binding['linkedConceptLabel']['value']);\n\n\n                            }\n                        });\n\n                        \n                        // console.log('jsonData.results.bindings',jsonData.results.bindings);\n                    }\n                }\n            }\n\n            const updatedLinkedConceptMap = {\n                ...linkedConceptMap,\n                [endpointKey]:{\n                    ...linkedConceptMap[endpointKey],\n                    [propCategory]:{\n                        ...linkedConceptMap[endpointKey][propCategory],\n                        sourceUris:retrievedSearchConceptUris,\n                        sourceLabels:retrievedSearchConceptLabels,\n                        propertyUris: retrievedLinkedPropertyUris,\n                        targetUris:retrievedLinkedConceptUris,\n                        targetLabels:retrievedLinkedConceptLabels\n                    }\n                }\n            };\n            setLinkedConceptMap(updatedLinkedConceptMap);\n            setLinkedConceptMapCallBack(updatedLinkedConceptMap);\n\n            console.log('updatedLinkedConceptMap ',updatedLinkedConceptMap);\n            \n            \n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    function handleSwitchClick(endpointKey,propCategory,checked){\n        console.log('handleSwitchClick: ',endpointKey, propCategory, checked);\n\n        const updatedEndpoints = {\n            ...endpoints,\n            [endpointKey] : { \n                ...endpoints[endpointKey],\n                ['enabledPropertyCategories']:{\n                    ...endpoints[endpointKey]['enabledPropertyCategories'],\n                    [propCategory]: checked}\n                }\n                \n        };\n        setEndpoints(updatedEndpoints);\n\n        console.log(\" updatedEndpoints \",updatedEndpoints);\n\n        if(searchLabel !=='' && checked){\n            fetchLinkedConcepts(endpointKey,propCategory);\n        }\n        if(!checked){\n            const updatedLinkedConceptMap = {\n                ...linkedConceptMap,\n                [endpointKey]:{\n                    ...linkedConceptMap[endpointKey],\n                    [propCategory]:{\n                        ...linkedConceptMap[endpointKey][propCategory],\n                        sourceUris:[],\n                        sourceLabels:[],\n                        propertyUris: [],\n                        targetUris:[],\n                        targetLabels:[]\n                    }\n                }\n            };\n            setLinkedConceptMap(updatedLinkedConceptMap);\n            setLinkedConceptMapCallBack(updatedLinkedConceptMap);\n            console.log('updatedLinkedConceptMap ',updatedLinkedConceptMap);\n        }\n\n        \n            \n\n    }\n\n    function handleEndpointClick(endpointKey,checked){\n\n        console.log('handleEndpointClick: ',endpointKey,checked)\n\n        const updatedEndpoints = {\n            ...endpoints,\n            [endpointKey] : { \n                ...endpoints[endpointKey],\n                ['enabledEndpoint']: checked}\n        };\n        setEndpoints(updatedEndpoints);\n        \n\n        console.log(\" updatedEndpoints \",updatedEndpoints);\n\n    }\n\n\n    return(\n        <Card>\n            <Card.Header>\n                Enable open link discovery\n            </Card.Header>\n            <Card.Body>\n                <Form className=\"d-grid gap-2\">\n                    { Object.entries(endpoints).map( ([endpointKey, endpointProps]) =>\n\n                    <>\n                        <Button \n                            variant=\"outline-secondary\" \n                            size=\"lg\" \n                            id={`${endpointKey}-button`} \n                            onClick={e=>handleEndpointClick(endpointKey,!endpointProps['enabledEndpoint'])}>\n                                {endpointProps.name}\n                        </Button>\n                        <Modal\n                            show={showModal}\n                           \n                            backdrop=\"static\"\n                            keyboard={false}\n                        >\n                            <Modal.Body >\n                                <p>Please wait an instant, we are querying the endpoint ...</p>\n                                <Spinner animation=\"border\" variant=\"secondary\" />\n                                <Spinner animation=\"border\" variant=\"secondary\" />\n                                <Spinner animation=\"border\" variant=\"secondary\" />\n                            </Modal.Body>\n                            \n                        </Modal>\n                        \n                        {(endpointProps['enabledEndpoint'])?(\n                                Object.keys(endpointProps['enabledPropertyCategories']).map( propCategory =>\n                                <>\n                                    <Form.Check\n                                        type=\"switch\"\n                                        id={`${endpointKey}-${propCategory}-switch`}\n                                        label={propCategory}\n                                        checked = {endpointProps['enabledPropertyCategories'][propCategory]}\n                                        onChange={e => handleSwitchClick(endpointKey,propCategory,e.target.checked)}\n                                    />\n                                    {   (searchLabel!=='' && linkedConceptMap[endpointKey]['conceptLabels'])?(\n                                            <p>{linkedConceptMap[endpointKey]['conceptLabels'].map(l => l+\" \")}</p>\n                                        ):(\n                                            <> </>\n                                        )\n                                    }\n                                </>\n                                )\n                        ):(\n                            <></>\n                        )\n                        }\n                    </>\n                    )}\n                </Form>\n            </Card.Body>\n            \n        </Card>\n    )\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/bindingVarTable/LinkedSearchDatasetVarTable.js",["211"],[],"import {useState,useEffect} from 'react'\nimport Table from 'react-bootstrap/Table';\nimport { Card } from 'react-bootstrap';\n\nexport default function LinkedSearchDatasetVarTable({linkedSearchPathList, linkedSearchLabel,  kbUri}){\n\n    const [varNames,setVarNames] = useState([]);\n    const [bindings, setBindings] = useState([]);\n\n    \n\n    function composeQuery(){\n        return 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#> '+\n            'PREFIX sosa: <http://www.w3.org/ns/sosa/> '+\n            'PREFIX ucmm: <http://purl.org/ucmm#> '+\n            'PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> '+\n            'PREFIX dcat: <http://www.w3.org/ns/dcat#> '+\n            'PREFIX dcterms: <http://purl.org/dc/terms/> '+\n            'SELECT DISTINCT ?dataset '+\n            'WHERE{ '+\n            '  { '+\n            '    ?dataset rdf:type dcat:Dataset . '+\n            '    ?dataset ?p ?concept . '+ // ?p matches: dcterms:subject, dcterms:theme\n            '    ?concept skos:prefLabel ?searchLabel . '+ // ?p matches: dcterms:subject, dcterms:theme '+\n            '  }UNION{ '+\n            '    ?dataset rdf:type dcat:Dataset . '+\n            '    ?dataset dcterms:description|dcterms:title ?searchLabel. '+ \n            '  }UNION{ '+\n            '    ?dataset rdf:type dcat:Dataset . '+\n            '    ?obsColl ucmm:hasAggregatedResult ?dataset . '+\n            '    ?obsColl  (sosa:hasFeatureofInterest|sosa:hasUltimateFeatureofInterest) ?concept . '+\n            '    ?concept skos:prefLabel ?searchLabel . '+\n            '  }UNION{ '+\n            '    ?dataset rdf:type dcat:Dataset .'+\n            '    ?obsColl ucmm:hasAggregatedResult ?dataset . '+\n            '    ?obsColl sosa:observedProperty ?concept . '+\n            '    ?concept skos:prefLabel ?searchLabel . '+\n            '  }'+\n            '  FILTER ('+ \n            '    regex(?searchLabel,\"'+linkedSearchLabel+'\",\"i\") '+\n            '  )'+\n            '  FILTER ('+ \n            '    lang(?searchLabel)=\"en\"'+\n            '  )'+\n            '}'\n    }\n\n    async function fetchData ()   {\n\n        try {  \n\n            console.log('kbUri : ',kbUri);\n            console.log('searchLabel : ',linkedSearchLabel);\n\n            console.log('composeQuery : ',composeQuery());\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ composeQuery()\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log('jsonData:', jsonData);\n            \n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        setBindings(jsonData.results.bindings);\n                    }}\n\n                if(jsonData.head){\n                    if(jsonData.head.vars){\n                        setVarNames(jsonData.head.vars);\n                    }\n                }\n                \n            }\n\n            // console.log('varNames:', varNames); \n            // console.log('bindings:', bindings);\n\n        } catch (error) {\n            console.log('Error:', error);\n            \n        }\n    }\n\n    useEffect (\n         () =>{\n            if(linkedSearchLabel !== ''){\n                fetchData();\n            }\n        },\n        [linkedSearchLabel]\n    );\n\n \n    return(\n        <>\n        {(bindings.length >0) ?(\n            <Card>\n                <Card.Header>\n                    {linkedSearchPathList.length>0?(\n                        <ul>\n                            {linkedSearchPathList.map( (linkedSearchPath) => <li>{linkedSearchPath}</li>)}\n                        </ul>\n                    ):(\n                        <></>\n                    )}\n                </Card.Header>\n                <Card.Body>\n                \n                    <Table striped bordered hover responsive size='lg' >\n                        <thead >\n                            <tr text-align=\"center\">\n                                {varNames.map(v => <th> {`${v}(s)`} </th> )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {bindings.map(binding =>\n                                <tr>\n                                    {varNames.map(varName => \n                                        <td> {binding[varName][\"value\"]} </td>\n                                    )}\n                                </tr>\n                            )}\n                        </tbody>\n                    </Table>\n                </Card.Body> \n            </Card>\n        ):(\n             <></>\n        )}\n        </>\n    )\n}\n","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/LinkedSearchVarTableList.js",["212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],[],"import { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nimport LinkedSearchDatasetVarTable from './bindingVarTable/LinkedSearchDatasetVarTable';\n\nexport default function LinkedSearchVarTableList ({ linkedConceptMap, kbUri}){\n\n\n    const [linkedSearchPathMap,setLinkedSearchPathMap] = useState(new Object());\n\n\n    // const [labelledInverseArcStructure,setLabelledInverseArcStructure] = useState(new Map());\n\n    \n    const [targetPropCategorySourceLabelMap, setTargetPropCategorySourceLabelMap]= useState(new Object());\n\n\n\n    useEffect(\n        \n\n        ()=>{\n\n            console.log(\"useEffect LinkedSearchDatasetVarTable\")\n\n            const lSPM = new Object();\n            Object.entries(linkedConceptMap).map(([endpointKey, propCategories])=>{\n                Object.entries(propCategories).map(([propCategory, tripleInfo])=>{\n                    if(Object.hasOwn(tripleInfo,'targetLabels' )){\n                        tripleInfo.targetLabels.map( targetLabel=>{\n                            \n                            if(!Object.hasOwn(lSPM,targetLabel)){\n                                lSPM[targetLabel] ={\n                                        targetUris: tripleInfo.targetUris,\n                                        propCategories:(new Array(tripleInfo.propertyUris.length)).fill(propCategory),\n                                        propertyUris:tripleInfo.propertyUris,\n                                        sourceUris: tripleInfo.sourceUris,\n                                        sourceLabels: tripleInfo.sourceLabels,\n                                        endpointKeys: (new Array(tripleInfo.propertyUris.length)).fill(endpointKey),\n                                        endpointUris: (new Array(tripleInfo.propertyUris.length)).fill(tripleInfo.endpointUri) \n                                    }\n                            }else{\n                                 \n                                lSPM[targetLabel]={\n                                        ...lSPM[targetLabel],\n                                        targetUris: lSPM[targetLabel].targetUris.concat(tripleInfo.targetUris),\n                                        propCategories: lSPM[targetLabel].propCategories.concat(new Array(tripleInfo.propertyUris.length).fill(propCategory)),\n                                        propertyUris:  lSPM[targetLabel].propertyUris.concat(tripleInfo.propertyUris),\n                                        sourceLabels: lSPM[targetLabel].sourceLabels.concat(tripleInfo.sourceLabels),\n                                        sourceUris: lSPM[targetLabel].sourceUris.concat(tripleInfo.sourceUris),\n                                        endpointKeys: lSPM[targetLabel].endpointKeys.concat((new Array(tripleInfo.propertyUris.length)).fill(endpointKey)),\n                                        endpointUris: lSPM[targetLabel].endpointUris.concat((new Array(tripleInfo.propertyUris.length)).fill(tripleInfo.endpointUri)),\n                                    }\n                            }\n                        })\n                    }\n                })\n            })\n\n            console.log(' lSPM: ',lSPM);\n\n            setLinkedSearchPathMap(lSPM);\n\n\n            const tPCSLM = {};\n\n            Object.entries(linkedConceptMap).map(([endpointKey, propCategories])=>{\n                Object.entries(propCategories).map(([propCategory, tripleInfo])=>{\n                    if(Object.hasOwn(tripleInfo,'targetLabels' )){\n                        \n\n                        for(let i=0;i<tripleInfo.targetLabels.length;i++){\n                            const targetLabel = tripleInfo.targetLabels[i];\n                            const sourceLabel = tripleInfo.sourceLabels[i];\n                            \n                            if(!tPCSLM.hasOwnProperty(targetLabel)){\n                                tPCSLM[targetLabel]= {};\n                            }\n                            if(!tPCSLM[targetLabel].hasOwnProperty(propCategory) ){\n                                tPCSLM[targetLabel][propCategory]= {};\n                            }\n                            if(!tPCSLM[targetLabel][propCategory].hasOwnProperty(sourceLabel) ){\n                                tPCSLM[targetLabel][propCategory][sourceLabel]= new Object();\n                                tPCSLM[targetLabel][propCategory][sourceLabel]['sourceUris'] =new Array();\n                                tPCSLM[targetLabel][propCategory][sourceLabel]['propertyUris'] = new Array();\n                                tPCSLM[targetLabel][propCategory][sourceLabel]['targetUris'] = new Array();\n                                tPCSLM[targetLabel][propCategory][sourceLabel]['endpointUris']= new Array();\n                                tPCSLM[targetLabel][propCategory][sourceLabel]['endpointKeys']= new Array();\n\n                            }\n\n                            \n                            const tripleMap =   tPCSLM[targetLabel][propCategory][sourceLabel];\n                            let tripleMapIsNew = true;\n                            for(let j=0;j<tripleMap['sourceUris'].length;j++){\n                                if(tripleMap['sourceUris'][j] ===  tripleInfo.sourceUris[i]\n                                    && tripleMap['propertyUris'][j] ===  tripleInfo.propertyUris[i]\n                                    && tripleMap['targetUris'][j] ===  tripleInfo.targetUris[i]\n                                    && tripleMap['endpointUris'][j]===  tripleInfo.endpointUri\n                                    && tripleMap['endpointKeys'][j]===  endpointKey\n                                    ){\n                                        tripleMapIsNew =false;\n                                        break;\n                                    }\n                            }\n                            if(tripleMapIsNew){\n                                tripleMap['sourceUris'].push(tripleInfo.sourceUris[i]);\n                                tripleMap['propertyUris'].push(tripleInfo.propertyUris[i]);\n                                tripleMap['targetUris'].push(tripleInfo.targetUris[i]);\n                                tripleMap['endpointUris'].push(tripleInfo.endpointUri);\n                                tripleMap['endpointKeys'].push(endpointKey);\n                            }\n                        }\n                    }\n                })\n            })\n\n            setTargetPropCategorySourceLabelMap(tPCSLM);\n\n            console.log(' tPCSLM: ',tPCSLM);\n\n\n        },[linkedConceptMap]\n    );\n\n\n    function getTargetLabels(){\n        return null ;\n    }\n    \n    function getLinkedSearchPathList(targetLabel){\n        console.log(`getLinkedSearchPathList ${targetLabel}`)\n        const searchPathList = [];\n\n        Object.entries(targetPropCategorySourceLabelMap[targetLabel]).map(([propCategory, sourceLabelMap])=>{\n            Object.entries(sourceLabelMap).map(([sourceLabel, tripleInfo])=>{\n                searchPathList.push(`${sourceLabel} > ${propCategory} > ${targetLabel}`);\n                console.log(` ${sourceLabel} > ${propCategory} > ${targetLabel}`)\n            })\n        })\n        \n        return searchPathList;\n\n    }\n\n    return(\n        <Card>\n            {\n            // Object.getOwnPropertyNames(linkedSearchPathMap).length>0?(\n            // //    <>{Object.getOwnPropertyNames(linkedSearchPathMap)[0]}</>\n            //     Object.getOwnPropertyNames(linkedSearchPathMap).map(targetLabel =>\n            //         // <Card className=\"d-grid gap-2\">\n            //         //     <Card.Header>\n            //         //         {targetLabel}\n            //         //     </Card.Header>\n                        \n            //         //     <Card.Body>    \n            //                 <LinkedSearchDatasetVarTable \n            //                     linkedSearchPathList = {[`${linkedSearchPathMap[targetLabel].sourceLabels[0]}>${targetLabel}`]}\n            //                     linkedSearchLabel ={targetLabel}\n            //                     endpointUri = {linkedSearchPathMap[targetLabel].endpointUri}\n            //                 ></LinkedSearchDatasetVarTable>\n            //         //     </Card.Body>  \n            //         // </Card>\n            //     )\n            // ):(\n            //     <Card className=\"d-grid gap-2\"> Results for Linked Discovery ... </Card>\n            // )\n\n            Object.keys(targetPropCategorySourceLabelMap).length>0?(\n                Object.keys(targetPropCategorySourceLabelMap).map((targetLabel) =>\n                      \n                    <LinkedSearchDatasetVarTable \n                        linkedSearchPathList = {getLinkedSearchPathList(targetLabel)}\n                        linkedSearchLabel ={targetLabel}\n                        kbUri = {kbUri}\n                    ></LinkedSearchDatasetVarTable>\n                )\n                ):(\n                    <> Results for Linked Discovery ... </>\n                )\n\n            }\n        </Card>\n    );\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/NetworkDiagram.jsx",[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/drawNetwork.js",[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/data.js",[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedGraph.js",["230","231","232","233","234","235","236","237","238"],[],"import * as d3 from 'd3';\nimport { useEffect, useState, useRef } from \"react\";\nimport { RADIUS, drawNetwork } from './drawNetwork';\nimport React from 'react';\n\n\n\nexport default function DatasetDiscoveryExplainedGraph ({kbUri, termInfo, width, height}){\n\n    const prefix2uri = {\n        'skos:':'http://www.w3.org/2004/02/skos/core#',\n        'sosa:': 'http://www.w3.org/ns/sosa/',\n        'ucmm:':'http://purl.org/ucmm#',\n        'rdf:': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'dcat:':'http://www.w3.org/ns/dcat#',\n        'dcterms:':'http://purl.org/dc/terms/',\n\n        'i1:':'http://example.org/b2a5ed57-5c4e-4596-b803-d2ac7f5b9991#',\n        'i2:':'http://example.org/51824c86-ae0f-442f-9df2-e86244984ba3#',\n        'i3:':'http://example.org/97b4842b-94b3-4205-8781-476813d8177b#',\n        'i4:':'http://example.org/e747d804-a5d1-4fd1-bd9b-306a8ebd4904#',\n        'i5:': 'http://example.org/de5b570a-b560-4e84-a755-52c2aa499874#',\n        'i6:': 'http://example.org/3df904de-e47d-4bf9-85a0-7c0942aff8b6#',\n        'i7:': 'http://example.org/BDML_TCHR#',\n        'i8:': 'http://example.org/4f676524-a831-41fe-9afb-d95f4e7597e3#',\n        'i9:': 'http://example.org/f4968943-ad6f-4563-a737-58fe3285fb3c#',\n        'i10:': 'http://example.org/17e24931-ccd6-4de0-a01c-9ffb3be88461#'\n    };\n\n    function getPrefixFromUri(resourceUri){\n\n        // console.log(`getPrefixFromUri(resourceUri: ', ${resourceUri})`);\n\n        let prefix = '';\n        Object.entries(prefix2uri).map( ([prefixKey,uri]) => {\n            if(resourceUri.includes(uri)){\n                console.log(` resourceUri.includes(${uri})`);\n                prefix = prefixKey;\n                return ;\n            }\n        })\n\n        // console.log(` prefix: ', ${prefix}`);\n\n        return prefix;\n    }\n    \n    function getPrefixedUri(resourceUri){\n\n        // console.log(`getPrefixedUri(resourceUri: ', ${resourceUri})`);\n\n        const prefix = getPrefixFromUri(resourceUri);\n\n        if(prefix==='')\n            return resourceUri;\n\n        const prefixUri = prefix2uri[prefix];\n        const prefixedUri = resourceUri.replace(prefixUri,prefix);\n\n        // console.log(` prefixedUri: ', ${prefixedUri}`);\n\n        return prefixedUri;\n    }\n\n    const prefix2group ={ // THEAI ODATIS FORMATER AERIS\n        'i1:': 1,\n        'i2:': 1,\n        'i3:': 1,\n        'i4:': 2,\n        'i5:': 2,\n        'i6:': 2,\n        'i7:': 3,\n        'i8:': 3,\n        'i9:': 3,\n        'i10:': 3,\n    }\n\n    function getGroupFromPrefixedUri(prefixedUri){\n        const prefix= prefixedUri.substring(0,prefixedUri.indexOf(\":\")+1)\n\n        \n        if(prefix2group[prefix]){\n            return prefix2group[prefix];\n        }else{\n            return 4;\n        }\n    }\n\n\n    const [d3Graph,setD3Graph]= useState({\n        nodes:[\n            // {\n            //     id: String,\n            //     group:Int32Array,\n            // }\n        ],\n        links:[\n            // {\n            //     source: String,\n            //     target: String,\n            //     value: Int16Array\n            // }\n        ]\n    });\n\n    // Todo instanciate in case of several graph manipulations\n    // const [spod,setSPOD]= useState({\n    //     subjects: [],\n    //     properties: [],\n    //     objects: [],\n    //     d3LinkIndexes: [] //\n    // });\n\n    function xQueryDatasetsFromDescAndTitle(){\n        return (`PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n        PREFIX sosa: <http://www.w3.org/ns/sosa/>\n        PREFIX ucmm: <http://purl.org/ucmm#> \n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n        PREFIX dcat: <http://www.w3.org/ns/dcat#> \n        PREFIX dcterms: <http://purl.org/dc/terms/> \n        SELECT DISTINCT ?dataset ?datasetProp ?litMentioningSearchLabel\n        WHERE{\n          VALUES ?datasetProp {dcterms:description dcterms:title}\n          ?dataset rdf:type dcat:Dataset . \n          ?dataset ?datasetProp ?litMentioningSearchLabel. \n          FILTER ( \n            regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n          )\n          FILTER (\n            lang(?litMentioningSearchLabel)=\"en\"\n          )\n        }`).toString().replace('\\n',' ');\n    }\n\n\n    const [currentExlainedTerm, setCurrentExplainedTerm] = useState('');\n\n    async function explainDatasetsFromDescAndTitle (tmpD3Graph) {\n        \n        console.log(`explainDatasetsFromDescAndTitle (${tmpD3Graph})`)\n        try {  \n\n            if(!termInfo.term){\n                return false;\n            }\n\n            console.log('explainDatasetsFromDescAndTitle()')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n\n            \n\n            const queryTxt = xQueryDatasetsFromDescAndTitle();\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log('jsonData:', jsonData);\n            \n            let subjects= [];\n            let properties = [];\n            let objects = [];\n\n            \n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            jsonData.results.bindings.map( binding =>{\n                                const datasetNode =  getPrefixedUri(binding['dataset']['value']);\n                                const datasetProp = getPrefixedUri(binding['datasetProp']['value']);\n\n                                const datasetPropNode = datasetNode.substring(0,datasetNode.indexOf(\":\")+1)\n                                + datasetProp.substring(datasetProp.indexOf(\":\")+1);\n\n                                const litMentioningSearchLabel= binding['litMentioningSearchLabel']['value'];\n\n                                \n                                if(!tmpD3Graph.nodes.includes(datasetNode)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetNode,\n                                        group: getGroupFromPrefixedUri(datasetNode)\n                                    });\n                                }\n\n                                if(!tmpD3Graph.nodes.includes(datasetPropNode)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetPropNode,\n                                        group: getGroupFromPrefixedUri(datasetPropNode)\n                                    });\n                                }\n\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: datasetPropNode,\n                                    value: 1\n                                })\n\n                                tmpD3Graph.links.push({\n                                    source: datasetNode,\n                                    target: datasetPropNode,\n                                    value: 1\n                                })\n\n                                \n                            })\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           return true;\n             \n        } catch (error) {\n            console.log('Error:', error);\n            return false;\n        }\n    }\n\n    const canvasRef = useRef(null);\n\n    // The force simulation mutates links and nodes, so create a copy first\n    // Node positions are initialized by d3\n    // let links= d3Graph.links.map((d) => ({ ...d }));\n    // let nodes= d3Graph.nodes.map((d) => ({ ...d }));\n\n    useEffect( () => {\n\n            if(d3Graph.nodes.length===0 || termInfo.term != currentExlainedTerm){\n                const tmpD3Graph = {\n                    nodes:[\n                        {\n                            id:'searchTerm',\n                            group:4,\n                        }\n                    ],\n                    links:[\n                        // {\n                        //     source: String,\n                        //     target: String,\n                        //     value: Int16Array\n                        // }\n                    ]\n                };\n                \n                explainDatasetsFromDescAndTitle(tmpD3Graph).then( (updatedExplanation) =>{\n                    console.log(` updatedExplanation: ${updatedExplanation}`)\n\n                    if(updatedExplanation){\n                        setD3Graph(tmpD3Graph);\n                        setCurrentExplainedTerm(termInfo.term);\n                    }\n                })\n\n                // let updatedExplanation = false;\n                // updatedExplanation &&=  await explainDatasetsFromDescAndTitle(tmpD3Graph);\n                // if(updatedExplanation){\n                //     setD3Graph(tmpD3Graph);\n                //     setCurrentExplainedTerm(termInfo.term);\n                // }\n            \n            }else{\n\n                console.log(` draw d3Graph :${d3Graph}`);\n                \n                // The force simulation mutates links and nodes, so create a copy first\n                // Node positions are initialized by d3\n                const links= d3Graph.links.map((d) => ({ ...d }));\n                const nodes= d3Graph.nodes.map((d) => ({ ...d }));\n\n                const canvas = canvasRef.current;\n                const context = canvas?.getContext('2d');\n\n                if (!context) {\n                return;\n                }\n\n                // run d3-force to find the position of nodes on the canvas\n                d3.forceSimulation(nodes)\n\n                // list of forces we apply to get node positions\n                .force(\n                'link',\n                d3.forceLink(links).id((d) => d.id) // Force #1: links between nodes\n                )\n                .force('collide', d3.forceCollide().radius(RADIUS)) // Force #2: avoid node overlaps\n                .force('charge', d3.forceManyBody()) // Force #3: attraction or repulsion between nodes\n                .force('center', d3.forceCenter(width / 2, height / 2)) // Force #4: nodes are attracted by the center of the chart area\n\n                // at each iteration of the simulation, draw the network diagram with the new node positions\n                .on('tick', () => {\n                drawNetwork(context, width, height, nodes, links);\n                });\n            }\n        }, [width, height,termInfo,d3Graph] // nodes, links\n    );\n\n    return(\n        <div>\n            {d3Graph.nodes.length>0?(\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                        width,\n                        height\n                    }}\n                    width={width}\n                    height={height}\n                />\n            ):(\n                <></>\n            )\n            }\n        </div>\n    )\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/drawNetwork.js",[],[],"/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedSVGGraph.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252"],[],"import * as d3 from 'd3';\nimport { useEffect, useState, useRef } from \"react\";\nimport { RADIUS, drawNetwork } from './drawNetwork';\nimport React from 'react';\nimport ForceUndirectedD3Graph from './ForceUndirectedD3Graph';\n\n\n\nexport default function DatasetDiscoveryExplainedSVGGraph ({kbUri, termInfo, width, height}){\n\n    const prefix2uri = {\n        'skos:':'http://www.w3.org/2004/02/skos/core#',\n        'sosa:': 'http://www.w3.org/ns/sosa/',\n        'ucmm:':'http://purl.org/ucmm#',\n        'rdf:': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'dcat:':'http://www.w3.org/ns/dcat#',\n        'dcterms:':'http://purl.org/dc/terms/',\n\n        'i1:':'http://example.org/b2a5ed57-5c4e-4596-b803-d2ac7f5b9991#',\n        'i2:':'http://example.org/51824c86-ae0f-442f-9df2-e86244984ba3#',\n        'i3:':'http://example.org/97b4842b-94b3-4205-8781-476813d8177b#',\n        'i4:':'http://example.org/e747d804-a5d1-4fd1-bd9b-306a8ebd4904#',\n        'i5:': 'http://example.org/de5b570a-b560-4e84-a755-52c2aa499874#',\n        'i6:': 'http://example.org/3df904de-e47d-4bf9-85a0-7c0942aff8b6#',\n        'i7:': 'http://example.org/BDML_TCHR#',\n        'i8:': 'http://example.org/4f676524-a831-41fe-9afb-d95f4e7597e3#',\n        'i9:': 'http://example.org/f4968943-ad6f-4563-a737-58fe3285fb3c#',\n        'i10:': 'http://example.org/17e24931-ccd6-4de0-a01c-9ffb3be88461#'\n    };\n\n    function getPrefixFromUri(resourceUri){\n\n        // console.log(`getPrefixFromUri(resourceUri: ', ${resourceUri})`);\n\n        let prefix = '';\n        Object.entries(prefix2uri).map( ([prefixKey,uri]) => {\n            if(resourceUri.includes(uri)){\n                // console.log(` resourceUri.includes(${uri})`);\n                prefix = prefixKey;\n                return; // exit map function\n            }\n        })\n\n        // console.log(` prefix: ', ${prefix}`);\n\n        return prefix;\n    }\n    \n    function getPrefixedUri(resourceUri){\n\n        // console.log(`getPrefixedUri(resourceUri: ', ${resourceUri})`);\n\n        const prefix = getPrefixFromUri(resourceUri);\n\n        if(prefix==='')\n            return resourceUri;\n\n        const prefixUri = prefix2uri[prefix];\n        const prefixedUri = resourceUri.replace(prefixUri,prefix);\n\n        // console.log(` prefixedUri: ', ${prefixedUri}`);\n\n        return prefixedUri;\n    }\n\n    const prefix2group ={ // THEAI ODATIS FORMATER AERIS\n        'i1:': 1,\n        'i2:': 1,\n        'i3:': 1,\n        'i4:': 2,\n        'i5:': 2,\n        'i6:': 2,\n        'i7:': 3,\n        'i8:': 3,\n        'i9:': 3,\n        'i10:': 3,\n\n        'skos:':5,\n        'sosa:':6,\n        'ucmm:':7,\n        'rdf:': 8,\n        'dcat:':9,\n        'dcterms:':10\n    }\n\n    function getGroupFromPrefixedUri(prefixedUri){\n        const prefix= prefixedUri.substring(0,prefixedUri.indexOf(\":\")+1)\n\n        \n        if(prefix2group[prefix]){\n            return prefix2group[prefix];\n        }else{\n            return 4;\n        }\n    }\n\n\n    const [d3Graph,setD3Graph]= useState({\n        nodes:[\n            // {\n            //     id: String,\n            //     group:Int32Array,\n            // }\n        ],\n        links:[\n            // {\n            //     source: String,\n            //     target: String,\n            //     value: Int16Array\n            // }\n        ]\n    });\n\n    const [currentlyExplainedTerm, setCurrentlyExplainedTerm] = useState('');\n    const [currentlyVisualisedTerm, setCurrentlyVisualisedTerm] = useState('');\n\n \n\n    function xQueryDatasetsFromDescAndTitle(){\n\n        console.log(`xQueryDatasetsFromDescAndTitle`);\n\n        return (`PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n        PREFIX sosa: <http://www.w3.org/ns/sosa/>\n        PREFIX ucmm: <http://purl.org/ucmm#> \n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n        PREFIX dcat: <http://www.w3.org/ns/dcat#> \n        PREFIX dcterms: <http://purl.org/dc/terms/> \n        SELECT DISTINCT ?dataset ?datasetProp ?litMentioningSearchLabel\n        WHERE{\n          VALUES ?datasetProp {dcterms:description dcterms:title}\n          ?dataset rdf:type dcat:Dataset . \n          ?dataset ?datasetProp ?litMentioningSearchLabel. \n          FILTER ( \n            regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n          )\n          FILTER (\n            lang(?litMentioningSearchLabel)=\"en\"\n          )\n        }`).replace('\\n',' ');\n    }\n\n    function xQueryDatasetsFromObsCol(term){\n\n        console.log(`xQueryDatasetsFromObsCol`);\n\n        // # ?obsCollDatasetProp {ucmm:hasAggregatedResult}\n        // # ?obsCollProp (sosa:hasFeatureofInterest|sosa:hasUltimateFeatureofInterest|sosa:observedProperty)\n        return (`PPREFIX skos: <http://www.w3.org/2004/02/skos/core#> \n        PREFIX sosa: <http://www.w3.org/ns/sosa/> \n        PREFIX ucmm: <http://purl.org/ucmm#> \n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n        PREFIX dcat: <http://www.w3.org/ns/dcat#> \n        PREFIX dcterms: <http://purl.org/dc/terms/> \n        SELECT DISTINCT ?dataset ?obsCollDatasetProp ?obsColl ?obsCollProp ?skosConcept ?litMentioningSearchLabel\n        WHERE{\n            VALUES ?obsCollDatasetProp {ucmm:hasAggregatedResult}\n            ?dataset rdf:type dcat:Dataset .\n            ?obsColl ?obsCollDatasetProp ?dataset .\n            ?obsColl  ?obsCollProp ?skosConcept. \n            ?skosConcept skos:prefLabel ?litMentioningSearchLabel . \n          FILTER ( \n            regex(?litMentioningSearchLabel,\"${term}\",\"i\") \n          )\n          FILTER (\n            lang(?litMentioningSearchLabel)=\"en\"\n          )\n        }`).replace('\\n',' ');\n    }\n\n\n    function containId(nodes,searchId){\n        for(const node of nodes){\n            if( node.id === searchId){\n                return true;\n               }\n        }\n        return false;\n    }\n\n    \n    async function explainDatasetsFromDescAndTitle (tmpD3Graph) {\n        \n        return new Promise (async (resolve,reject) => {\n\n        try {  \n\n            if(!termInfo.term){\n                resolve(false);\n            }\n\n            console.log('explainDatasetsFromDescAndTitle()')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n            console.log(' tmpD3Graph: ',tmpD3Graph);\n\n            \n\n            const queryTxt = xQueryDatasetsFromDescAndTitle();\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log(' jsonData:', jsonData);\n            \n            let subjects= [];\n            let properties = [];\n            let objects = [];\n\n            \n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            jsonData.results.bindings.map( binding =>{\n                                const datasetNodeId =  getPrefixedUri(binding['dataset']['value']);\n                                const datasetProp = getPrefixedUri(binding['datasetProp']['value']);\n\n                                const datasetPropNodeId = datasetNodeId.substring(0,datasetNodeId.indexOf(\":\")+1)\n                                + datasetProp.substring(datasetProp.indexOf(\":\")+1);\n\n                                const litMentioningSearchLabel= binding['litMentioningSearchLabel']['value'];\n\n                                if(!containId(tmpD3Graph.nodes,datasetNodeId)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetNodeId,\n                                        group: getGroupFromPrefixedUri(datasetNodeId)\n                                    });\n                                }\n\n                                if(!tmpD3Graph.nodes.includes(datasetPropNodeId)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetPropNodeId,\n                                        group: getGroupFromPrefixedUri(datasetPropNodeId)\n                                    });\n                                }\n\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: datasetPropNodeId,\n                                    value: 1\n                                })\n\n                                tmpD3Graph.links.push({\n                                    source: datasetNodeId,\n                                    target: datasetPropNodeId,\n                                    value: 1\n                                })\n\n                                \n                            })\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           resolve(true);\n             \n        } catch (error) {\n            console.log('Error:', error);\n            resolve(false);\n        }\n        })\n    }\n\n    // const svgRef = useRef(null);\n\n    // The force simulation mutates links and nodes, so create a copy first\n    // Node positions are initialized by d3\n    // let links= d3Graph.links.map((d) => ({ ...d }));\n    // let nodes= d3Graph.nodes.map((d) => ({ ...d }));\n\n    useEffect( function () {\n\n\n            console.log(`useEffect DatasetDiscoveryExplainedSVGGraph`)\n            console.log(` termInfo.term`,termInfo.term)\n            console.log(` currentExlainedTerm`, currentlyExplainedTerm )\n            console.log(` currentlyVisualisedTerm`, currentlyVisualisedTerm )\n\n            console.log(` d3Graph`,d3Graph)\n\n            if(termInfo.term === '' ){\n                return;\n            }\n               \n\n            if(d3Graph.nodes.length===0 || termInfo.term != currentlyExplainedTerm ){\n\n                const tmpD3Graph = {\n                    nodes:[\n                        {\n                            id:'searchTerm',\n                            group:4,\n                        }\n                    ],\n                    links:[\n                        // {\n                        //     source: String,\n                        //     target: String,\n                        //     value: Int16Array\n                        // }\n                    ]\n                };\n                \n                let updatedExplanation = false;\n                explainDatasetsFromDescAndTitle(tmpD3Graph).then( (explanationReceived) =>{\n                    \n                    updatedExplanation ||=  explanationReceived;\n\n                    if(updatedExplanation){\n                        setD3Graph(tmpD3Graph);\n                        setCurrentlyExplainedTerm(termInfo.term);\n                    }\n\n\n                    console.log(` updatedExplanation: ${updatedExplanation}`)\n                })\n\n                // NOTE that since explainDatasetsFromDescAndTitle is asynchonous the main process may return before reaching the end of explainDatasetsFromDescAndTitle\n                if(currentlyVisualisedTerm!==''){\n                    if(d3.selectAll('g')){\n                        d3.selectAll('g').remove();\n                        console.log(`  d3.selectAll('g').remove()`);\n                    }\n                }\n\n                return;\n\n            }\n            \n            if(d3Graph.nodes.length>0 && (currentlyVisualisedTerm==='' || currentlyExplainedTerm !== currentlyVisualisedTerm )){\n\n                console.log(` draw d3Graph `,d3Graph);\n\n\n                \n                \n                 // Specify the color scale. or schemePaired for 12 colors\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n                // The force simulation mutates links and nodes, so create a copy\n                // so that re-evaluating this cell produces the same result.\n                const links = d3Graph.links.map(d => ({...d}));\n                const nodes = d3Graph.nodes.map(d => ({...d}));\n\n                \n                \n                // Create a simulation with several forces.\n                const simulation = d3.forceSimulation(nodes)\n                    .force(\"link\", d3.forceLink(links).id(d => d.id))\n                    .force(\"charge\", d3.forceManyBody())\n                    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n                    .on(\"tick\", ticked);\n\n                // Create the SVG container.\n                const svg = d3.select(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"viewBox\", [0, 0, width, height])\n                    .attr(\"style\", \"max-width: 100%; height: auto;\")\n                ;\n\n\n                // Add a line for each link, and a circle for each node.\n                const link = svg.append(\"g\")\n                    .attr(\"stroke\", \"#999\")\n                    .attr(\"stroke-opacity\", 0.6)\n                    .selectAll()\n                    .data(links)\n                    .join(\"line\")\n                    .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n                const node = svg.append(\"g\")\n                    .attr(\"stroke\", \"#fff\")\n                    .attr(\"stroke-width\", 1.5)\n                    .selectAll()\n                    .data(nodes)\n                    .join(\"circle\")\n                    .attr(\"r\", 5)\n                    .attr(\"fill\", d => color(d.group));\n\n                    // Add a drag behavior.\n                // node.call(d3.drag()\n                // .on(\"start\", dragstarted)\n                // .on(\"drag\", dragged)\n                // .on(\"end\", dragended));\n\n                const drag_handler = d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended);\n          \n                drag_handler(node);\n\n                // node.append(\"title\")\n                //     .text(d => d.id);\n                    // .attr(\"style\",\"font-family: sans-serif; font-size: 10px;\");\n                    // .attr('x', 11)\n                    // .attr('y', 3);\n\n                node.append(\"text\")\n                    .text(d => d.id)\n                    .attr(\"text-anchor\",\"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr(\"style\",\"font-family: sans-serif; font-size: 10;  \")\n                    .attr('x', 6)\n                    .attr('y', 3);\n\n                simulation\n                    .nodes(nodes)\n                    .on(\"tick\", ticked);\n              \n                simulation.force(\"link\")\n                    .links(links);\n                   \n\n                \n\n                // Set the position attributes of links and nodes each time the simulation ticks.\n                function ticked() {\n                    link\n                        .attr(\"x1\", d => d.source.x) // DatasetDiscoveryExplainedSVGGraph.js:364 Uncaught TypeError: Cannot read properties of undefined (reading 'attr')\n                        .attr(\"y1\", d => d.source.y)\n                        .attr(\"x2\", d => d.target.x)\n                        .attr(\"y2\", d => d.target.y);\n\n                    node\n                        // .attr(\"cx\", d => d.x)\n                        // .attr(\"cy\", d => d.y);\n                        .attr(\"transform\", function(d) {\n                            return \"translate(\" + d.x + \",\" + d.y + \")\";\n                          })\n                }\n\n                // Reheat the simulation when drag starts, and fix the subject position.\n                function dragstarted(event) {\n                    if (!event.active) simulation.alphaTarget(0.3).restart();\n                    event.subject.fx = event.subject.x;\n                    event.subject.fy = event.subject.y;\n                }\n\n                // Update the subject (dragged node) position during drag.\n                function dragged(event) {\n                    event.subject.fx = event.x;\n                    event.subject.fy = event.y;\n                }\n\n                // Restore the target alpha so the simulation cools after dragging ends.\n                // Unfix the subject position now that it’s no longer being dragged.\n                function dragended(event) {\n                    if (!event.active) simulation.alphaTarget(0);\n                    event.subject.fx = null;\n                    event.subject.fy = null;\n                }\n\n                // When this cell is re-run, stop the previous simulation. (This doesn’t\n                // really matter since the target alpha is zero and the simulation will\n                // stop naturally, but it’s a good practice.)\n                //  simulation.stop();\n\n\n                setCurrentlyVisualisedTerm(currentlyExplainedTerm);\n\n                \n\n            }\n\n\n\n        }, [termInfo, d3Graph] // nodes, links\n    );\n\n    return(\n        <div>\n            {d3Graph.nodes.length>0?(\n                <svg id='svg'\n                    // ref={svgRef}\n                    style={{\n                        width,\n                        height\n                    }}\n                    width={width}\n                    height={height}\n                />\n            ):(\n                <></>\n            )\n            }\n        </div>\n    )\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/ExplainedDatasetDiscovery.js",["253","254","255","256","257","258"],[],"import { useEffect, useState, useRef } from \"react\";\nimport React from 'react';\nimport ForceUndirectedD3Graph from './ForceUndirectedD3Graph';\n\n\n\nexport default function ExplainedDatasetDiscovery ({kbUri, termInfo, width, height}){\n\n    const prefix2uri = {\n        'skos:':'http://www.w3.org/2004/02/skos/core#',\n        'sosa:': 'http://www.w3.org/ns/sosa/',\n        'ucmm:':'http://purl.org/ucmm#',\n        'rdf:': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'dcat:':'http://www.w3.org/ns/dcat#',\n        'dcterms:':'http://purl.org/dc/terms/',\n\n        'i1:':'http://example.org/b2a5ed57-5c4e-4596-b803-d2ac7f5b9991#',\n        'i2:':'http://example.org/51824c86-ae0f-442f-9df2-e86244984ba3#',\n        'i3:':'http://example.org/97b4842b-94b3-4205-8781-476813d8177b#',\n        'i4:':'http://example.org/e747d804-a5d1-4fd1-bd9b-306a8ebd4904#',\n        'i5:': 'http://example.org/de5b570a-b560-4e84-a755-52c2aa499874#',\n        'i6:': 'http://example.org/3df904de-e47d-4bf9-85a0-7c0942aff8b6#',\n        'i7:': 'http://example.org/BDML_TCHR#',\n        'i8:': 'http://example.org/4f676524-a831-41fe-9afb-d95f4e7597e3#',\n        'i9:': 'http://example.org/f4968943-ad6f-4563-a737-58fe3285fb3c#',\n        'i10:': 'http://example.org/17e24931-ccd6-4de0-a01c-9ffb3be88461#'\n    };\n\n    function getPrefixFromUri(resourceUri){\n\n        // console.log(`getPrefixFromUri(resourceUri: ', ${resourceUri})`);\n\n        let prefix = '';\n        Object.entries(prefix2uri).map( ([prefixKey,uri]) => {\n            if(resourceUri.includes(uri)){\n                // console.log(` resourceUri.includes(${uri})`);\n                prefix = prefixKey;\n                return; // exit map function\n            }\n        })\n\n        // console.log(` prefix: ', ${prefix}`);\n\n        return prefix;\n    }\n    \n    function getPrefixedUri(resourceUri){\n\n        // console.log(`getPrefixedUri(resourceUri: ', ${resourceUri})`);\n\n        const prefix = getPrefixFromUri(resourceUri);\n\n        if(prefix==='')\n            return resourceUri;\n\n        const prefixUri = prefix2uri[prefix];\n        const prefixedUri = resourceUri.replace(prefixUri,prefix);\n\n        // console.log(` prefixedUri: ', ${prefixedUri}`);\n\n        return prefixedUri;\n    }\n\n    const prefix2group ={ // THEAI ODATIS FORMATER AERIS\n        'i1:': 1,\n        'i2:': 1,\n        'i3:': 1,\n        'i4:': 2,\n        'i5:': 2,\n        'i6:': 2,\n        'i7:': 3,\n        'i8:': 3,\n        'i9:': 3,\n        'i10:': 3,\n    }\n\n    function getGroupFromPrefixedUri(prefixedUri){\n        const prefix= prefixedUri.substring(0,prefixedUri.indexOf(\":\")+1)\n\n        \n        if(prefix2group[prefix]){\n            return prefix2group[prefix];\n        }else{\n            return 4;\n        }\n    }\n\n\n    const [d3Graph,setD3Graph]= useState({\n        nodes:[\n            // {\n            //     id: String,\n            //     group:Int32Array,\n            // }\n        ],\n        links:[\n            // {\n            //     source: String,\n            //     target: String,\n            //     value: Int16Array\n            // }\n        ]\n    });\n\n    // Todo instanciate in case of several graph manipulations\n    // const [spod,setSPOD]= useState({\n    //     subjects: [],\n    //     properties: [],\n    //     objects: [],\n    //     d3LinkIndexes: [] //\n    // });\n\n    function xQueryDatasetsFromDescAndTitle(){\n\n        console.log(`xQueryDatasetsFromDescAndTitle`);\n\n        return (`PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n        PREFIX sosa: <http://www.w3.org/ns/sosa/>\n        PREFIX ucmm: <http://purl.org/ucmm#> \n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n        PREFIX dcat: <http://www.w3.org/ns/dcat#> \n        PREFIX dcterms: <http://purl.org/dc/terms/> \n        SELECT DISTINCT ?dataset ?datasetProp ?litMentioningSearchLabel\n        WHERE{\n          VALUES ?datasetProp {dcterms:description dcterms:title}\n          ?dataset rdf:type dcat:Dataset . \n          ?dataset ?datasetProp ?litMentioningSearchLabel. \n          FILTER ( \n            regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n          )\n          FILTER (\n            lang(?litMentioningSearchLabel)=\"en\"\n          )\n        }`).replace('\\n',' ');\n    }\n\n\n    const [currentlyExlainedTerm, setCurrentlyExplainedTerm] = useState('');\n    const [currentlyVisualisedTerm, setCurrentlyVisualisedTerm] = useState('');\n\n    const currentGraphId = useRef(1);\n\n\n    async function explainDatasetsFromDescAndTitle (tmpD3Graph) {\n        \n        return new Promise (async (resolve,reject) => {\n\n        try {  \n\n            if(!termInfo.term){\n                resolve(false);\n            }\n\n            console.log('explainDatasetsFromDescAndTitle()')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n            console.log(' tmpD3Graph: ',tmpD3Graph);\n\n            \n\n            const queryTxt = xQueryDatasetsFromDescAndTitle();\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log(' jsonData:', jsonData);\n            \n            \n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            jsonData.results.bindings.map( binding =>{\n                                const datasetNode =  getPrefixedUri(binding['dataset']['value']);\n                                const datasetProp = getPrefixedUri(binding['datasetProp']['value']);\n\n                                const datasetPropNode = datasetNode.substring(0,datasetNode.indexOf(\":\")+1)\n                                + datasetProp.substring(datasetProp.indexOf(\":\")+1);\n\n                                const litMentioningSearchLabel= binding['litMentioningSearchLabel']['value'];\n\n                                \n                                if(!tmpD3Graph.nodes.includes(datasetNode)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetNode,\n                                        group: getGroupFromPrefixedUri(datasetNode)\n                                    });\n                                }\n\n                                if(!tmpD3Graph.nodes.includes(datasetPropNode)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetPropNode,\n                                        group: getGroupFromPrefixedUri(datasetPropNode)\n                                    });\n                                }\n\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: datasetPropNode,\n                                    value: 1\n                                })\n\n                                tmpD3Graph.links.push({\n                                    source: datasetNode,\n                                    target: datasetPropNode,\n                                    value: 1\n                                })\n\n                                \n                            })\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           resolve(true);\n             \n        } catch (error) {\n            console.log('Error:', error);\n            resolve(false);\n        }\n        })\n    }\n\n    // const svgRef = useRef(null);\n\n    // The force simulation mutates links and nodes, so create a copy first\n    // Node positions are initialized by d3\n    // let links= d3Graph.links.map((d) => ({ ...d }));\n    // let nodes= d3Graph.nodes.map((d) => ({ ...d }));\n\n    useEffect( function () {\n\n\n            console.log(`useEffect ExplainedDatasetDiscovery`)\n            console.log(` termInfo.term`,termInfo.term)\n            console.log(` currentExlainedTerm`, currentlyExlainedTerm )\n            console.log(` currentlyVisualisedTerm`, currentlyVisualisedTerm )\n\n            console.log(` d3Graph`,d3Graph)\n\n            if(termInfo.term === '' ){\n                return;\n            }\n               \n\n\n            const tmpD3Graph = {\n                nodes:[\n                    {\n                        id:'searchTerm',\n                        group:4,\n                    }\n                ],\n                links:[\n                    // {\n                    //     source: String,\n                    //     target: String,\n                    //     value: Int16Array\n                    // }\n                ]\n            };\n            \n            let updatedExplanation = false;\n            explainDatasetsFromDescAndTitle(tmpD3Graph).then( (explanationReceived) =>{\n                \n                updatedExplanation ||=  explanationReceived;\n\n                if(updatedExplanation){\n\n                    currentGraphId.current = currentGraphId.current +1;\n                    setD3Graph(tmpD3Graph);\n                    setCurrentlyExplainedTerm(termInfo.term);\n                }\n\n\n                console.log(` updatedExplanation: ${updatedExplanation}`)\n            })\n\n\n        }, [termInfo] // nodes, links\n    );\n\n    return(\n        d3Graph.nodes.length>0?(\n            <ForceUndirectedD3Graph graphId={currentGraphId.current} width={width} height={height} d3Graph={d3Graph} ></ForceUndirectedD3Graph>\n        ):(\n            <></>\n        )   \n    )\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/ForceUndirectedD3Graph.js",["259"],[],"import * as d3 from 'd3';\nimport { useEffect } from \"react\";\n\nexport default function ForceUndirectedD3Graph ({ graphId, width, height,d3Graph}){\n\n\n    useEffect( function () {\n\n            console.log(`useEffect ForceUndirectedD3Graph`)\n\n         \n                console.log(` d3Graph `,d3Graph);\n                console.log(` graphId `,graphId);\n\n                 // Specify the color scale.\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n                // The force simulation mutates links and nodes, so create a copy\n                // so that re-evaluating this cell produces the same result.\n                const links = d3Graph.links.map(d => ({...d}));\n                const nodes = d3Graph.nodes.map(d => ({...d}));\n                \n                // Create a simulation with several forces.\n                const simulation = d3.forceSimulation(nodes)\n                    .force(\"link\", d3.forceLink(links).id(d => d.id))\n                    .force(\"charge\", d3.forceManyBody())\n                    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n                    .on(\"tick\", ticked);\n\n                // if( d3.select(`svg${graphId-1}`)){\n                //     d3.select(`svg${graphId-1}`).remove();\n                // }\n\n                // Create the SVG container.\n                const svg = d3.select(`svg${graphId}`)\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"viewBox\", [0, 0, width, height])\n                    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n\n                // Add a line for each link, and a circle for each node.\n                const link = svg.append(\"g\")\n                    .attr(\"stroke\", \"#999\")\n                    .attr(\"stroke-opacity\", 0.6)\n                    .selectAll()\n                    .data(links)\n                    .join(\"line\")\n                    .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n                const node = svg.append(\"g\")\n                    .attr(\"stroke\", \"#fff\")\n                    .attr(\"stroke-width\", 1.5)\n                    .selectAll()\n                    .data(nodes)\n                    .join(\"circle\")\n                    .attr(\"r\", 10)\n                    .attr(\"fill\", d => color(d.group));\n\n                node.append(\"title\")\n                    .text(d => d.id);\n\n                // Add a drag behavior.\n                node.call(d3.drag()\n                        .on(\"start\", dragstarted)\n                        .on(\"drag\", dragged)\n                        .on(\"end\", dragended));\n\n                // Set the position attributes of links and nodes each time the simulation ticks.\n                function ticked() {\n                    link\n                        .attr(\"x1\", d => d.source.x) // DatasetDiscoveryExplainedSVGGraph.js:364 Uncaught TypeError: Cannot read properties of undefined (reading 'attr')\n                        .attr(\"y1\", d => d.source.y)\n                        .attr(\"x2\", d => d.target.x)\n                        .attr(\"y2\", d => d.target.y);\n\n                    node\n                        .attr(\"cx\", d => d.x)\n                        .attr(\"cy\", d => d.y);\n                }\n\n                // Reheat the simulation when drag starts, and fix the subject position.\n                function dragstarted(event) {\n                    if (!event.active) simulation.alphaTarget(0.3).restart();\n                    event.subject.fx = event.subject.x;\n                    event.subject.fy = event.subject.y;\n                }\n\n                // Update the subject (dragged node) position during drag.\n                function dragged(event) {\n                    event.subject.fx = event.x;\n                    event.subject.fy = event.y;\n                }\n\n                // Restore the target alpha so the simulation cools after dragging ends.\n                // Unfix the subject position now that it’s no longer being dragged.\n                function dragended(event) {\n                    if (!event.active) simulation.alphaTarget(0);\n                    event.subject.fx = null;\n                    event.subject.fy = null;\n                }\n\n                // When this cell is re-run, stop the previous simulation. (This doesn’t\n                // really matter since the target alpha is zero and the simulation will\n                // stop naturally, but it’s a good practice.)\n                //  simulation.stop();\n\n        }, [graphId,d3Graph] // nodes, links\n    );\n\n    return(\n        <div>\n            <svg id={`svg${graphId}`}\n                style={{\n                    width,\n                    height\n                }}\n                width={width}\n                height={height}\n            />\n        </div>\n    )\n}","/home/vincentarmant/workspace/nodejs/react-restapi-call/src/components/DatasetDiscoveryExplainedSVGGraph_v2.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276"],[],"import * as d3 from 'd3';\nimport { useEffect, useState, useRef } from \"react\";\nimport { RADIUS, drawNetwork } from './drawNetwork';\nimport React from 'react';\nimport ForceUndirectedD3Graph from './ForceUndirectedD3Graph';\n\n\n\nexport default function DatasetDiscoveryExplainedSVGGraph_v2 ({kbUri, termInfo, width, height}){\n\n    const prefix2uri = {\n        'skos:':'http://www.w3.org/2004/02/skos/core#',\n        'sosa:': 'http://www.w3.org/ns/sosa/',\n        'ucmm:':'http://purl.org/ucmm#',\n        'rdf:': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'dcat:':'http://www.w3.org/ns/dcat#',\n        'dcterms:':'http://purl.org/dc/terms/',\n        'cpm:':  'http://purl.org/voc/cpm#' ,\n        'geo:': 'http://www.opengis.net/ont/geosparql#',\n        'ssn-ext:': 'http://www.w3.org/ns/ssn/ext/' ,\n        'time:':  'http://www.w3.org/2006/time#',\n        'xsd:':  'http://www.w3.org/2001/XMLSchema#',\n\n        'i1:':'http://example.org/b2a5ed57-5c4e-4596-b803-d2ac7f5b9991#',\n        'i2:':'http://example.org/51824c86-ae0f-442f-9df2-e86244984ba3#',\n        'i3:':'http://example.org/97b4842b-94b3-4205-8781-476813d8177b#',\n        'i4:':'http://example.org/e747d804-a5d1-4fd1-bd9b-306a8ebd4904#',\n        'i5:': 'http://example.org/de5b570a-b560-4e84-a755-52c2aa499874#',\n        'i6:': 'http://example.org/3df904de-e47d-4bf9-85a0-7c0942aff8b6#',\n        'i7:': 'http://example.org/BDML_TCHR#',\n        'i8:': 'http://example.org/4f676524-a831-41fe-9afb-d95f4e7597e3#',\n        'i9:': 'http://example.org/f4968943-ad6f-4563-a737-58fe3285fb3c#',\n        'i10:': 'http://example.org/17e24931-ccd6-4de0-a01c-9ffb3be88461#'\n    };\n\n    function getPrefixFromUri(resourceUri){\n\n        // console.log(`getPrefixFromUri(resourceUri: ', ${resourceUri})`);\n\n        let prefix = '';\n        Object.entries(prefix2uri).map( ([prefixKey,uri]) => {\n            if(resourceUri.includes(uri)){\n                // console.log(` resourceUri.includes(${uri})`);\n                prefix = prefixKey;\n                return; // exit map function\n            }\n        })\n\n        // console.log(` prefix: ', ${prefix}`);\n\n        return prefix;\n    }\n    \n    function getPrefixedUri(resourceUri){\n\n        // console.log(`getPrefixedUri(resourceUri: ', ${resourceUri})`);\n\n        const prefix = getPrefixFromUri(resourceUri);\n\n        if(prefix==='')\n            return resourceUri;\n\n        const prefixUri = prefix2uri[prefix];\n        const prefixedUri = resourceUri.replace(prefixUri,prefix);\n\n         console.log(` prefixedUri: ', ${prefixedUri}`);\n\n        return prefixedUri;\n    }\n\n    const prefix2group ={ // THEAI ODATIS FORMATER AERIS\n        'i1:': 1,\n        'i2:': 1,\n        'i3:': 1,\n        'i4:': 2,\n        'i5:': 2,\n        'i6:': 2,\n        'i7:': 3,\n        'i8:': 3,\n        'i9:': 3,\n        'i10:': 3,\n\n        'skos:':5,\n        'sosa:':6,\n        'ucmm:':7,\n        'rdf:': 8,\n        'dcat:':9,\n        'dcterms:':10\n    }\n\n    function getGroupFromPrefixedUri(prefixedUri){\n\n        // console.log('prefixedUri',prefixedUri);\n        \n        const  end = String(prefixedUri).indexOf(\":\");\n\n        // console.log('end',end);\n\n        const prefix= prefixedUri.substring(0,end+1)\n\n        \n        if(prefix2group[prefix]){\n            return prefix2group[prefix];\n        }else{\n            return 4;\n        }\n    }\n\n    const [d3Graph,setD3Graph]= useState({\n        nodes:[\n            // {\n            //     id: String,\n            //     group:Int32Array,\n            // }\n        ],\n        links:[\n            // {\n            //     source: String,\n            //     target: String,\n            //     value: Int16Array\n            // }\n        ]\n    });\n\n    const [currentlyExplainedTerm, setCurrentlyExplainedTerm] = useState('');\n    const [currentlyVisualisedTerm, setCurrentlyVisualisedTerm] = useState('');\n \n    function containId(nodes,searchId){\n        for(const node of nodes){\n            if( node.id === searchId){\n                return true;\n               }\n        }\n        return false;\n    }\n  \n    async function explainDatasetsFromDescriptionTitleKeyword (tmpD3Graph) {\n        \n        return new Promise (async (resolve,reject) => {\n\n        try {  \n\n            if(!termInfo.term){\n                resolve(false);\n            }\n\n            console.log('explainDatasetsFromDescAndTitle()')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n            console.log(' tmpD3Graph: ',tmpD3Graph);\n\n            \n\n            const queryTxt = `\n            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n            PREFIX sosa: <http://www.w3.org/ns/sosa/>\n            PREFIX ucmm: <http://purl.org/ucmm#> \n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n            PREFIX dcat: <http://www.w3.org/ns/dcat#> \n            PREFIX dcterms: <http://purl.org/dc/terms/> \n            SELECT DISTINCT ?dataset ?datasetProp ?litMentioningSearchLabel\n            WHERE{\n                VALUES ?datasetProp {dcterms:description dcterms:title dcat:keyword}\n                ?dataset rdf:type dcat:Dataset . \n                ?dataset ?datasetProp ?litMentioningSearchLabel. \n                FILTER ( \n                    regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n                )\n                FILTER (\n                    lang(?litMentioningSearchLabel)=\"en\"\n                )\n            }\n            `.replace('\\n',' ')\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log(' jsonData:', jsonData);\n            \n            let subjects= [];\n            let properties = [];\n            let objects = [];\n\n            \n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            jsonData.results.bindings.map( binding =>{\n\n\n                                const datasetNodeId =  getPrefixedUri(binding['dataset']['value']);\n                                // console.log('datasetNodeId',datasetNodeId)\n                                if(!containId(tmpD3Graph.nodes,datasetNodeId)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetNodeId,\n                                        group: getGroupFromPrefixedUri(datasetNodeId),\n                                        nodeInfo:binding['dataset']['value'],\n                                        nodeLabel: datasetNodeId,\n                                        nodeType: 'resource', // literal, resource, property, \n                                        nodeUri:binding['dataset']['value']\n                                    });\n                                }\n\n\n                                const datasetProp = getPrefixedUri(binding['datasetProp']['value']);\n                                // console.log('datasetProp',datasetProp)\n                                const datasetPropId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                // console.log('datasetPropId',datasetPropId)\n                                tmpD3Graph.nodes.push({\n                                    id: datasetPropId,\n                                    group: getGroupFromPrefixedUri(datasetProp),\n                                    nodeInfo: binding['datasetProp']['value'],\n                                    nodeLabel: datasetProp,\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n\n\n                                const litMentioningSearchLabel= binding['litMentioningSearchLabel']['value'];\n                                const litId = datasetNodeId.substring(0,datasetNodeId.indexOf(\":\")+1)+\"lit_\"+(tmpD3Graph.nodes.length);\n                                const litLabel =  datasetNodeId+\".\"+datasetProp.substring(datasetProp.indexOf(\":\")+1) ;\n\n                                console.log('litId',litId)\n                                tmpD3Graph.nodes.push({\n                                    id: litId,\n                                    group: getGroupFromPrefixedUri(litId),\n                                    nodeInfo: litMentioningSearchLabel,\n                                    nodeLabel: litLabel,\n                                    nodeType: 'literal' // literal, resource, property, \n                                });\n\n                                const litRelId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                tmpD3Graph.nodes.push({\n                                    id: litRelId,\n                                    group: 4,\n                                    nodeInfo: 'in',\n                                    nodeLabel: \":in\",\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n                                \n\n                                // search label to lit\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: litRelId,\n                                    value: 1\n                                });\n\n                                tmpD3Graph.links.push({\n                                    source: litRelId,\n                                    target: litId,\n                                    value: 1\n                                });\n\n                                   \n                                // Dataset to lit\n\n                                tmpD3Graph.links.push({\n                                    source: datasetNodeId,\n                                    target: datasetPropId,\n                                    value: 1\n                                });\n\n                                tmpD3Graph.links.push({\n                                    source: datasetPropId,\n                                    target: litId,\n                                    value: 1\n                                });\n\n\n\n                                \n                            })\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           resolve(true);\n             \n        } catch (error) {\n            console.log('Error:', error);\n            resolve(false);\n        }\n        })\n    }\n\n    async function explainDatasetsFromSubjects (tmpD3Graph) {\n        \n        return new Promise (async (resolve,reject) => {\n\n        try {  \n\n            if(!termInfo.term){\n                resolve(false);\n            }\n\n            console.log('explainDatasetsFromDescAndTitle()')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n            console.log(' tmpD3Graph: ',tmpD3Graph);\n\n            \n\n            const queryTxt = `\n            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n            PREFIX sosa: <http://www.w3.org/ns/sosa/>\n            PREFIX ucmm: <http://purl.org/ucmm#> \n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n            PREFIX dcat: <http://www.w3.org/ns/dcat#> \n            PREFIX dcterms: <http://purl.org/dc/terms/> \n            SELECT DISTINCT ?dataset ?datasetProp ?conceptMentioningSearchLabel ?litMentioningSearchLabel\n            WHERE{\n                VALUES ?datasetProp {dcterms:subject }\n                ?dataset rdf:type dcat:Dataset.\n                ?dataset ?datasetProp ?conceptMentioningSearchLabel. \n                ?conceptMentioningSearchLabel skos:prefLabel ?litMentioningSearchLabel.\n                FILTER ( \n                    regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n                )\n                FILTER (\n                    lang(?litMentioningSearchLabel)=\"en\"\n                )\n            }\n            `.replace('\\n',' ')\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log(' jsonData:', jsonData);\n            \n            \n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            jsonData.results.bindings.map( binding =>{\n\n                                // ?dataset ?datasetProp ?conceptMentioningSearchLabel ?litMentioningSearchLabel\n\n                                const datasetNodeId =  getPrefixedUri(binding['dataset']['value']);\n                                // console.log('datasetNodeId',datasetNodeId)\n                                if(!containId(tmpD3Graph.nodes,datasetNodeId)){\n                                    tmpD3Graph.nodes.push({\n                                        id: datasetNodeId,\n                                        group: getGroupFromPrefixedUri(datasetNodeId),\n                                        nodeInfo:binding['dataset']['value'],\n                                        nodeLabel: datasetNodeId,\n                                        nodeType: 'resource', // literal, resource, property, \n                                        nodeUri:binding['dataset']['value']\n                                    });\n                                }\n\n\n                                const datasetProp = getPrefixedUri(binding['datasetProp']['value']);\n                                // console.log('datasetProp',datasetProp)\n                                const datasetPropId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                // console.log('datasetPropId',datasetPropId)\n                                tmpD3Graph.nodes.push({\n                                    id: datasetPropId,\n                                    group: getGroupFromPrefixedUri(datasetProp),\n                                    nodeInfo: binding['datasetProp']['value'],\n                                    nodeLabel: datasetProp,\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n\n\n                                const conceptLabel= binding['litMentioningSearchLabel']['value'];\n                                const conceptId = getPrefixedUri(binding['conceptMentioningSearchLabel']['value']);\n                                console.log('conceptId',conceptId)\n                                tmpD3Graph.nodes.push({\n                                    id: conceptId,\n                                    group: getGroupFromPrefixedUri(conceptId),\n                                    nodeInfo: `${conceptId} :\\n  ${conceptLabel}`,\n                                    nodeLabel: conceptId,\n                                    nodeType: 'resource' // literal, resource, property, \n                                });\n\n                                const conceptRelId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                tmpD3Graph.nodes.push({\n                                    id: conceptRelId,\n                                    group: 4,\n                                    nodeInfo: 'in',\n                                    nodeLabel: \":in\",\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n                                \n\n                                // search label to concept\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: conceptRelId,\n                                    value: 1\n                                });\n\n                                tmpD3Graph.links.push({\n                                    source: conceptRelId,\n                                    target: conceptId,\n                                    value: 1\n                                });\n\n                                   \n                                // Dataset to concept\n\n                                tmpD3Graph.links.push({\n                                    source: datasetNodeId,\n                                    target: datasetPropId,\n                                    value: 1\n                                });\n\n                                tmpD3Graph.links.push({\n                                    source: datasetPropId,\n                                    target: conceptId,\n                                    value: 1\n                                });\n\n                            })\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           resolve(true);\n             \n        } catch (error) {\n            console.log('Error:', error);\n            resolve(false);\n        }\n        })\n    }\n    \n\n    async function retrieveObsColParentPath2Dataset(obsColUri){\n\n        console.log('retrieveObsColParentPath2Dataset: ',obsColUri)\n\n        const queryTxt = `\n        PREFIX sosa: <http://www.w3.org/ns/sosa/> \n        PREFIX ucmm: <http://purl.org/ucmm#> \n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n        SELECT DISTINCT ?obsCollParent ?dataset\n        WHERE{\n            <${obsColUri}>  (^sosa:hasMember)%2B ?obsCollParent.\n            ?obsCollParent rdf:type sosa:ObservationCollection .\n            OPTIONAL{\n                ?obsCollParent ucmm:hasAggregatedResult ?dataset .\n            }\n        }\n        `.replace('\\n',' ')\n\n        const response = await fetch(kbUri,{\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers:{\n                \"Content-Type\": 'application/x-www-form-urlencoded; charset=utf-8',\n                // \"Content-Type\": 'application/sparql-query; charset=utf-8',\n                \"xhrFields\": {withCredentials: true},\n                \"Accept\" : \"application/json\",\n            },\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\",\n            body: \"query=\"+ queryTxt\n        }\n        )            \n        \n        const jsonData = await response.json();\n        \n        console.log(' jsonData:', jsonData);\n\n        const parentPath = [];\n        const parentPathDataset = [];\n\n        if(jsonData.results){\n            if(jsonData.results.bindings){\n                if(jsonData.results.bindings.length>0){\n\n                    jsonData.results.bindings.map( binding =>{\n                        parentPath.push(binding['obsCollParent']['value'])\n                        if(binding['dataset']){\n                            parentPathDataset.push(binding['dataset']['value'])\n                        }else{\n                            parentPathDataset.push(undefined)\n                        }\n                    })\n                }\n            }\n        }\n\n        console.log(' parentPath: ',parentPath);\n        console.log(' parentPathDataset: ',parentPathDataset);\n\n        return [parentPath, parentPathDataset];\n    }\n\n    async function explainDatasetsFromObsColParams (tmpD3Graph) {\n        \n        return new Promise (async (resolve,reject) => {\n\n        try {  \n\n            if(!termInfo.term){\n                resolve(false);\n            }\n\n            console.log('explainDatasetsFromObsColParams')\n            console.log(' kbUri : ',kbUri);\n            console.log(' termInfo.term : ',termInfo.term);\n            console.log(' tmpD3Graph: ',tmpD3Graph);\n\n            \n\n            const queryTxt = `\n            PREFIX skos: <http://www.w3.org/2004/02/skos/core#> \n            PREFIX sosa: <http://www.w3.org/ns/sosa/> \n            PREFIX ucmm: <http://purl.org/ucmm#> \n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n            PREFIX dcat: <http://www.w3.org/ns/dcat#> \n            PREFIX dcterms: <http://purl.org/dc/terms/> \n            SELECT DISTINCT ?obsColl ?obsCollProp ?skosConcept ?litMentioningSearchLabel ?dataset\n            WHERE{\n                ?obsColl rdf:type sosa:ObservationCollection .\n                ?obsColl  ?obsCollProp ?skosConcept. \n                ?skosConcept skos:prefLabel ?litMentioningSearchLabel . \n            OPTIONAL{\n                ?obsColl ucmm:hasAggregatedResult ?dataset .\n            }\n            FILTER ( \n                regex(?litMentioningSearchLabel,\"${termInfo.term}\",\"i\") \n            )\n            FILTER (\n                lang(?litMentioningSearchLabel)=\"en\"\n            )\n            }\n            `.replace('\\n',' ')\n\n            const response = await fetch(kbUri,{\n                method: \"POST\",\n                credentials: \"same-origin\",\n                headers:{\n                    \"Content-Type\": 'application/x-www-form-urlencoded',\n                    \"xhrFields\": {withCredentials: true},\n                    \"Accept\" : \"application/json\",\n                },\n                redirect: \"follow\",\n                referrerPolicy: \"no-referrer\",\n                body: \"query=\"+ queryTxt\n            }\n            )            \n            \n            const jsonData = await response.json();\n            \n            console.log(' jsonData:', jsonData);\n            \n            let subjects= [];\n            let properties = [];\n            let objects = [];\n\n\n            if(jsonData){\n\n                if(jsonData.results){\n                    if(jsonData.results.bindings){\n                        if(jsonData.results.bindings.length>0){\n\n                            for (let index = 0;  index< jsonData.results.bindings.length; index++) {\n                                const binding = jsonData.results.bindings[index];\n                                \n\n                                // ?obsColl ?obsCollProp ?skosConcept ?litMentioningSearchLabel ?dataset\n\n                                const obsColl = binding['obsColl']['value'];\n                                const obsCollNodeId =  getPrefixedUri(obsColl);\n                                // console.log('obsCollNodeId',obsCollNodeId)\n                                if(!containId(tmpD3Graph.nodes,obsCollNodeId)){\n                                    tmpD3Graph.nodes.push({\n                                        id: obsCollNodeId,\n                                        group: getGroupFromPrefixedUri(obsCollNodeId),\n                                        nodeInfo:obsColl,\n                                        nodeLabel: obsCollNodeId,\n                                        nodeType: 'resource', // literal, resource, property, \n                                        nodeUri:obsColl\n                                    });\n                                }\n\n\n                                // console.log('obsCollProp',obsCollProp)\n                                const obsCollProp = binding['obsCollProp']['value'];\n                                const obsCollPropId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                // console.log('obsCollPropId',obsCollPropID)\n                                tmpD3Graph.nodes.push({\n                                    id: obsCollPropId,\n                                    group: getGroupFromPrefixedUri(obsCollProp),\n                                    nodeInfo: obsCollProp,\n                                    nodeLabel: getPrefixedUri(obsCollProp),\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n\n\n                                const conceptLabel= binding['litMentioningSearchLabel']['value'];\n                                const conceptId = getPrefixedUri(binding['skosConcept']['value']);\n                                console.log('conceptId',conceptId)\n                                tmpD3Graph.nodes.push({\n                                    id: conceptId,\n                                    group: getGroupFromPrefixedUri(conceptId),\n                                    nodeInfo: `${binding['skosConcept']['value']} :\\n  ${conceptLabel}`,\n                                    nodeLabel: conceptId,\n                                    nodeType: 'resource' // literal, resource, property, \n                                });\n  \n\n\n                                const searchTermRelationId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                tmpD3Graph.nodes.push({\n                                    id: searchTermRelationId,\n                                    group: 4,\n                                    nodeInfo: 'in',\n                                    nodeLabel: \":in\",\n                                    nodeType: 'property' // literal, resource, property, \n                                });\n\n                                \n                                // search label to conceptId\n\n                                tmpD3Graph.links.push({\n                                    source: tmpD3Graph.nodes[0].id,\n                                    target: searchTermRelationId,\n                                    value: 1\n                                });\n\n\n                                tmpD3Graph.links.push({\n                                    source: searchTermRelationId,\n                                    target: conceptId,\n                                    value: 1\n                                });\n\n                                   \n                                \n                                // ObsColl to conceptId\n\n                                tmpD3Graph.links.push({\n                                    source: obsCollNodeId,\n                                    target: obsCollPropId,\n                                    value: 1\n                                });\n\n                                tmpD3Graph.links.push({\n                                    source: obsCollPropId,\n                                    target: conceptId,\n                                    value: 1\n                                });\n\n \n\n                                \n\n                                if( binding['dataset']!== undefined){\n                                    \n\n                                    const dataset = binding['dataset']['value'];\n                                    console.log('dataset: ',dataset);\n                                    const datasetNodeId =  getPrefixedUri(dataset);\n                                    // console.log('datasetNodeId',datasetNodeId)\n                                    if(!containId(tmpD3Graph.nodes,datasetNodeId)){\n                                        tmpD3Graph.nodes.push({\n                                            id: datasetNodeId,\n                                            group: getGroupFromPrefixedUri(datasetNodeId),\n                                            nodeInfo:dataset,\n                                            nodeLabel: datasetNodeId,\n                                            nodeType: 'resource', // literal, resource, property, \n                                            nodeUri:dataset\n                                        });\n                                    }\n\n                                    const obsCollDatasetProp = getPrefixedUri(\"http://purl.org/ucmm#hasAggregatedResult\");\n                                    // console.log('datasetProp',datasetProp)\n                                    const obsCollDatasetPropId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                    // console.log('datasetPropId',datasetPropId)\n                                    tmpD3Graph.nodes.push({\n                                        id: obsCollDatasetPropId,\n                                        group: getGroupFromPrefixedUri(obsCollDatasetProp),\n                                        nodeInfo: \"http://purl.org/ucmm#hasAggregatedResult\",\n                                        nodeLabel: obsCollDatasetProp,\n                                        nodeType: 'property' // literal, resource, property, \n                                    });\n\n                                    \n                                    // ObsColl to Dataset\n\n                                    tmpD3Graph.links.push({\n                                        source: obsCollNodeId,\n                                        target: obsCollDatasetPropId,\n                                        value: 1\n                                    });\n\n                                    tmpD3Graph.links.push({\n                                        source: obsCollDatasetPropId,\n                                        target: datasetNodeId,\n                                        value: 1\n                                    });\n\n                                    \n\n\n                                }else{\n\n                                    // ?obsCollParent ?dataset\n\n\n                                    const a =  await retrieveObsColParentPath2Dataset(obsColl);\n                                    const obsCollParentPath =a[0];\n                                    const obsCollParentPathDSet=a[1];\n\n                                    let currrentObsCol = obsColl;\n                                    let currrentObsColNodeId = getPrefixedUri(currrentObsCol);\n\n                                    for (let i = 0; i < obsCollParentPath.length; i++) {\n\n                                        const obsCollParent = obsCollParentPath[i];\n                                        const obsCollParentNodeId = getPrefixedUri(obsCollParent);\n                                        if(!containId(tmpD3Graph.nodes,obsCollParentNodeId)){\n                                            tmpD3Graph.nodes.push({\n                                                id: obsCollParentNodeId,\n                                                group: getGroupFromPrefixedUri(obsCollParentNodeId),\n                                                nodeInfo:obsCollParent,\n                                                nodeLabel: obsCollParentNodeId,\n                                                nodeType: 'resource', // literal, resource, property, \n                                                nodeUri:obsCollParent\n                                            });\n                                        }\n\n\n                                        const hasMemberNodeId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                        tmpD3Graph.nodes.push({\n                                            id: hasMemberNodeId,\n                                            group: getGroupFromPrefixedUri(\"sosa:hasMember\"),\n                                            nodeInfo: \"http://www.w3.org/ns/sosa/hasMember\",\n                                            nodeLabel: \"sosa:hasMember\",\n                                            nodeType: 'property' // literal, resource, property,\n                                        });\n\n\n                                        // obsCollParent to currentObsColl\n\n                                        tmpD3Graph.links.push({\n                                            source: obsCollParentNodeId,\n                                            target: hasMemberNodeId,\n                                            value: 1\n                                        });\n\n                                        tmpD3Graph.links.push({\n                                            source: hasMemberNodeId,\n                                            target: currrentObsColNodeId,\n                                            value: 1\n                                        });\n\n                                        \n                                        if(obsCollParentPathDSet[i]!== undefined){\n\n                                            console.log(`obsCollParentPathDSet[${i}]: `,obsCollParentPathDSet[i]);\n\n                                            const obsCollParentDSet = obsCollParentPathDSet[i];\n                                            const obsCollParentDSetNodeId =  getPrefixedUri(obsCollParentDSet);\n\n                                            if(!containId(tmpD3Graph.nodes,obsCollParentDSetNodeId)){\n                                                tmpD3Graph.nodes.push({\n                                                    id: obsCollParentDSetNodeId,\n                                                    group: getGroupFromPrefixedUri(obsCollParentDSetNodeId),\n                                                    nodeInfo: obsCollParentDSet,\n                                                    nodeLabel: obsCollParentDSetNodeId,\n                                                    nodeType: 'resource', // literal, resource, property, \n                                                    nodeUri: obsCollParentDSet\n                                                });\n                                            }\n\n                                            const hasAggregatedResultNodeId = `nodeIdx_${tmpD3Graph.nodes.length}`;\n                                            tmpD3Graph.nodes.push({\n                                                id: hasAggregatedResultNodeId,\n                                                group: getGroupFromPrefixedUri(\"ucmm:hasAggregatedResult\"),\n                                                nodeInfo:  \"http://purl.org/ucmm#hasAggregatedResult\",\n                                                nodeLabel: \"ucmm:hasAggregatedResult\",\n                                                nodeType: 'property' // literal, resource, property, \n                                                    \n                                            });\n                                            \n\n                                            // obsCollParent to obsCollParentDataset\n\n                                            tmpD3Graph.links.push({\n                                                source: obsCollParentNodeId,\n                                                target: hasAggregatedResultNodeId,\n                                                value: 1\n                                            });\n                                            tmpD3Graph.links.push({\n                                                source: hasAggregatedResultNodeId,\n                                                target: obsCollParentDSetNodeId,\n                                                value: 1\n                                            });\n    \n\n                                        }\n\n                                        \n                                        currrentObsCol = obsCollParent;\n                                        currrentObsColNodeId = obsCollParentNodeId;\n\n                                    }\n\n                                }\n   \n                            }\n                        }\n                    }\n                }\n\n            }\n\n            console.log('tmpD3Graph:', tmpD3Graph);\n           resolve(true);\n             \n        } catch (error) {\n            console.error('Error:', error);\n            resolve(false);\n        }\n        })\n    }\n   \n    async function explainDatasets(tmpD3Graph){\n        let updatedExplanation = true;\n        updatedExplanation &&=await explainDatasetsFromDescriptionTitleKeyword(tmpD3Graph);\n        updatedExplanation &&= await explainDatasetsFromSubjects(tmpD3Graph);\n        updatedExplanation &&= await explainDatasetsFromObsColParams(tmpD3Graph);\n\n\n        setD3Graph(tmpD3Graph);\n        setCurrentlyExplainedTerm(termInfo.term);\n\n        return updatedExplanation;\n    }\n\n    useEffect(  function () {\n\n            console.log(`useEffect DatasetDiscoveryExplainedSVGGraph`)\n            console.log(` termInfo.term`,termInfo.term)\n            console.log(` currentExlainedTerm`, currentlyExplainedTerm )\n            console.log(` currentlyVisualisedTerm`, currentlyVisualisedTerm )\n\n            console.log(` d3Graph`,d3Graph)\n\n            if(termInfo.term === '' ){\n                return;\n            }\n               \n\n            if(d3Graph.nodes.length===0 || termInfo.term != currentlyExplainedTerm ){\n\n                const tmpD3Graph = {\n                    nodes:[\n                        {\n                            id:'nodeIdx_0',\n                            group:4,\n                            nodeInfo:'Search term: '+termInfo.term,\n                            nodeLabel: termInfo.term,\n                            nodeType: 'literal' // literal, resource, property, \n                        }\n                    ],\n                    links:[\n                        // {\n                        //     source: String,\n                        //     target: String,\n                        //     value: Int16Array  // default 1\n                        //     linkType : String  // in, out\n                        // }\n                    ]\n                };\n                \n                // TODO Remove\n                // let updatedExplanation = false;\n                // explainDatasetsFromDescAndTitle(tmpD3Graph).then( (explanationReceived) =>{\n                    \n                //     updatedExplanation ||=  explanationReceived;\n\n                //     if(updatedExplanation){\n                //         setD3Graph(tmpD3Graph);\n                //         setCurrentlyExplainedTerm(termInfo.term);\n                //     }\n\n\n                //     console.log(` updatedExplanation: ${updatedExplanation}`)\n                // })\n\n                explainDatasets(tmpD3Graph);\n\n                // NOTE that since explainDatasetsFromDescAndTitle is asynchonous the main process may return before reaching the end of explainDatasetsFromDescAndTitle\n                if(currentlyVisualisedTerm!==''){\n                    if(d3.selectAll('g')){\n                        d3.selectAll('g').remove();\n                        console.log(`  d3.selectAll('g').remove()`);\n                    }\n                }\n\n                return;\n\n            }\n            \n            if(d3Graph.nodes.length>0 && (currentlyVisualisedTerm==='' || currentlyExplainedTerm !== currentlyVisualisedTerm )){\n\n                console.log(` draw d3Graph `,d3Graph);\n\n                 // Specify the color scale. or schemePaired for 12 colors\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n                // The force simulation mutates links and nodes, so create a copy\n                // so that re-evaluating this cell produces the same result.\n                const links = d3Graph.links.map(d => (Object.create(d)));\n                const nodes = d3Graph.nodes.map(d => (Object.create(d)));\n\n                \n                \n                // Create a simulation with several forces.\n                const simulation = d3.forceSimulation(nodes)\n                    .force(\"link\", d3.forceLink(links).id(d => d.id))\n                    .force(\"charge\", d3.forceManyBody())\n                    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n                    // .force(\"collide\", d3.forceCollide().radius(30).strength(1) ) // distance between node\n                    .on(\"tick\", ticked);\n\n                // Create the SVG container.\n                const svg = d3.select(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"viewBox\", [0, 0, width, height])\n                    .attr(\"style\", \"max-width: 100%; height: auto;\")\n                ;\n\n\n                // Add a line for each link, and a circle for each node.\n                const link = svg.append(\"g\")\n                    .attr(\"stroke\", \"#999\")\n                    .attr(\"stroke-opacity\", 0.6)\n                    .selectAll(\"line\")\n                    .data(links)\n                    .join(\"line\")\n                    .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n                const node = svg.append(\"g\")\n                    // .attr(\"stroke\", \"#000\" ) // defined within  circle\n                    // .attr(\"stroke-width\", 4)  // defined within circle\n                    .selectAll(\".node\")\n                    .data(nodes)\n                    .join(\"g\")\n                    .attr('class', 'node');\n                \n                node.append(\"circle\")\n                    .attr(\"r\", d => d.nodeType.includes('property')?3:10 )\n                    .attr(\"fill\", d => color(d.group))\n                    // .attr(\"stroke\", \"#000\" )\n                    // .attr(\"stroke-width\", 4) \n                    .attr(\"stroke\", function (d){return (d.id.endsWith('dataset') )?\"#000\":\"#fff\" ;})\n                    .attr(\"stroke-width\", function (d){return (d.id.endsWith('dataset') )?3:1.5;})  // d.nodeUri.include\n\n                // Add a drag behavior.\n                node.call(d3.drag()\n                    .on(\"start\", dragstarted)\n                    .on(\"drag\", dragged)\n                    .on(\"end\", dragended));\n\n\n                node.append(\"title\")\n                    .text(function(d){ return d.nodeInfo ;})\n                    .style('font-family', 'sans-serif')\n                    .style('font-size', '10px')\n                    .attr('x', 11)\n                    .attr('y', 3);\n\n                node.append(\"text\")\n                    .text(d => d.nodeLabel)\n                    // .style('fill', '#000')\n                    .style('stroke', 'Blue') // #000\n                    .style('stroke-width', 0.1)\n                    .style('font-family', 'sans-serif')\n                    .style('font-size', '13px')\n                    .attr(\"text-anchor\",\"start\")\n                    .attr('x', 11)\n                    .attr('y', 3)\n                ;\n\n                // simulation\n                //     .nodes(nodes)\n                //     .on(\"tick\", ticked);\n              \n                // simulation.force(\"link\")\n                //     .links(links);\n                   \n\n                \n\n                // Set the position attributes of links and nodes each time the simulation ticks.\n                function ticked() {\n                    link\n                        .attr(\"x1\", d => d.source.x) // DatasetDiscoveryExplainedSVGGraph.js:364 Uncaught TypeError: Cannot read properties of undefined (reading 'attr')\n                        .attr(\"y1\", d => d.source.y)\n                        .attr(\"x2\", d => d.target.x)\n                        .attr(\"y2\", d => d.target.y);\n\n                    // node.attr(\"cx\", d => d.x)\n                    //     .attr(\"cy\", d => d.y);\n                    node.attr(\"transform\", function(d) {\n                            return \"translate(\" + d.x + \",\" + d.y + \")\";\n                          });\n                }\n\n                // Reheat the simulation when drag starts, and fix the subject position.\n                function dragstarted(event) {\n                    if (!event.active) simulation.alphaTarget(0.3).restart();\n                    event.subject.fx = event.subject.x;\n                    event.subject.fy = event.subject.y;\n                }\n\n                // Update the subject (dragged node) position during drag.\n                function dragged(event) {\n                    event.subject.fx = event.x;\n                    event.subject.fy = event.y;\n                }\n\n                // Restore the target alpha so the simulation cools after dragging ends.\n                // Unfix the subject position now that it’s no longer being dragged.\n                function dragended(event) {\n                    if (!event.active) simulation.alphaTarget(0);\n                    event.subject.fx = null;\n                    event.subject.fy = null;\n                }\n\n                // When this cell is re-run, stop the previous simulation. (This doesn’t\n                // really matter since the target alpha is zero and the simulation will\n                // stop naturally, but it’s a good practice.)\n                //  simulation.stop();\n\n\n                setCurrentlyVisualisedTerm(currentlyExplainedTerm);\n\n            }\n\n\n\n        }, [termInfo, d3Graph] // nodes, links\n    );\n\n    return(\n        <div>\n            {d3Graph.nodes.length>0?(\n                <svg id='svg'\n                    // ref={svgRef}\n                    style={{\n                        width,\n                        height\n                    }}\n                    width={width}\n                    height={height}\n                />\n            ):(\n                <></>\n            )\n            }\n        </div>\n    )\n}","/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/index.js",[],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/App.js",["277","278","279","280","281","282","283","284","285","286","287"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/LinkedSearchVarTableList.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/SearchLabelForm.js",["306","307"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedSVGGraph.js",["308","309","310","311","312","313","314","315","316","317","318","319","320","321"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedGraph.js",["322","323","324","325","326","327","328","329","330"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/EndpointsCheckBox.js",["331","332","333","334","335","336","337"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/ExplainedDatasetDiscovery.js",["338","339","340","341","342","343"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/bindingVarTable/RetrievedDatasetVarTable.js",["344","345","346"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/DatasetDiscoveryExplainedSVGGraph_v2.js",["347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/NetworkDiagram.jsx",[],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/data.js",[],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/drawNetwork.js",[],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/ForceUndirectedD3Graph.js",["364"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/components/bindingVarTable/LinkedSearchDatasetVarTable.js",["365"],[],"/home/vincentarmant/workspace/nodejs/explainingOpenDiscovery/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/drawNetwork.js",[],[],{"ruleId":"366","severity":1,"message":"367","line":8,"column":8,"nodeType":"368","messageId":"369","endLine":8,"endColumn":25},{"ruleId":"366","severity":1,"message":"370","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":32},{"ruleId":"366","severity":1,"message":"371","line":11,"column":8,"nodeType":"368","messageId":"369","endLine":11,"endColumn":22},{"ruleId":"366","severity":1,"message":"372","line":12,"column":8,"nodeType":"368","messageId":"369","endLine":12,"endColumn":12},{"ruleId":"366","severity":1,"message":"373","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":38},{"ruleId":"366","severity":1,"message":"374","line":14,"column":8,"nodeType":"368","messageId":"369","endLine":14,"endColumn":41},{"ruleId":"366","severity":1,"message":"375","line":16,"column":8,"nodeType":"368","messageId":"369","endLine":16,"endColumn":33},{"ruleId":"366","severity":1,"message":"376","line":24,"column":9,"nodeType":"368","messageId":"369","endLine":24,"endColumn":26},{"ruleId":"366","severity":1,"message":"377","line":28,"column":10,"nodeType":"368","messageId":"369","endLine":28,"endColumn":26},{"ruleId":"366","severity":1,"message":"378","line":28,"column":28,"nodeType":"368","messageId":"369","endLine":28,"endColumn":47},{"ruleId":"379","severity":1,"message":"380","line":61,"column":9,"nodeType":"381","messageId":"382","endLine":61,"endColumn":117},{"ruleId":"366","severity":1,"message":"383","line":79,"column":20,"nodeType":"368","messageId":"369","endLine":79,"endColumn":24},{"ruleId":"384","severity":1,"message":"385","line":81,"column":9,"nodeType":"386","endLine":81,"endColumn":11,"suggestions":"387"},{"ruleId":"384","severity":1,"message":"388","line":71,"column":10,"nodeType":"386","endLine":71,"endColumn":22,"suggestions":"389"},{"ruleId":"390","severity":1,"message":"391","line":86,"column":29,"nodeType":"392","endLine":86,"endColumn":59},{"ruleId":"393","severity":1,"message":"394","line":38,"column":59,"nodeType":"395","messageId":"396","endLine":38,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":42,"column":17,"nodeType":"398","messageId":"399","endLine":42,"endColumn":24},{"ruleId":"384","severity":1,"message":"400","line":168,"column":9,"nodeType":"386","endLine":168,"endColumn":24,"suggestions":"401"},{"ruleId":"393","severity":1,"message":"397","line":76,"column":79,"nodeType":"395","messageId":"402","endLine":76,"endColumn":81},{"ruleId":"393","severity":1,"message":"397","line":77,"column":131,"nodeType":"395","messageId":"402","endLine":77,"endColumn":133},{"ruleId":"384","severity":1,"message":"403","line":85,"column":8,"nodeType":"386","endLine":85,"endColumn":21,"suggestions":"404"},{"ruleId":"393","severity":1,"message":"394","line":101,"column":45,"nodeType":"395","messageId":"396","endLine":101,"endColumn":47},{"ruleId":"393","severity":1,"message":"397","line":165,"column":64,"nodeType":"395","messageId":"402","endLine":165,"endColumn":66},{"ruleId":"405","severity":1,"message":"406","line":220,"column":17,"nodeType":"407","messageId":"408","endLine":222,"endColumn":45,"fix":"409"},{"ruleId":"405","severity":1,"message":"410","line":266,"column":17,"nodeType":"407","messageId":"408","endLine":266,"endColumn":45,"fix":"411"},{"ruleId":"384","severity":1,"message":"400","line":105,"column":9,"nodeType":"386","endLine":105,"endColumn":28,"suggestions":"412"},{"ruleId":"366","severity":1,"message":"413","line":9,"column":12,"nodeType":"368","messageId":"369","endLine":9,"endColumn":31},{"ruleId":"414","severity":1,"message":"415","line":9,"column":67,"nodeType":"416","messageId":"417","endLine":9,"endColumn":79},{"ruleId":"414","severity":1,"message":"415","line":15,"column":93,"nodeType":"416","messageId":"417","endLine":15,"endColumn":105},{"ruleId":"414","severity":1,"message":"415","line":26,"column":26,"nodeType":"416","messageId":"417","endLine":26,"endColumn":38},{"ruleId":"393","severity":1,"message":"397","line":27,"column":81,"nodeType":"395","messageId":"402","endLine":27,"endColumn":83},{"ruleId":"393","severity":1,"message":"397","line":28,"column":80,"nodeType":"395","messageId":"402","endLine":28,"endColumn":82},{"ruleId":"393","severity":1,"message":"397","line":30,"column":65,"nodeType":"395","messageId":"402","endLine":30,"endColumn":67},{"ruleId":"393","severity":1,"message":"397","line":67,"column":81,"nodeType":"395","messageId":"402","endLine":67,"endColumn":83},{"ruleId":"393","severity":1,"message":"397","line":68,"column":80,"nodeType":"395","messageId":"402","endLine":68,"endColumn":82},{"ruleId":"414","severity":1,"message":"415","line":83,"column":81,"nodeType":"416","messageId":"417","endLine":83,"endColumn":93},{"ruleId":"418","severity":1,"message":"419","line":84,"column":95,"nodeType":"416","messageId":"417","endLine":84,"endColumn":106},{"ruleId":"418","severity":1,"message":"419","line":85,"column":98,"nodeType":"416","messageId":"417","endLine":85,"endColumn":109},{"ruleId":"418","severity":1,"message":"419","line":86,"column":96,"nodeType":"416","messageId":"417","endLine":86,"endColumn":107},{"ruleId":"418","severity":1,"message":"419","line":87,"column":97,"nodeType":"416","messageId":"417","endLine":87,"endColumn":108},{"ruleId":"418","severity":1,"message":"419","line":88,"column":97,"nodeType":"416","messageId":"417","endLine":88,"endColumn":108},{"ruleId":"366","severity":1,"message":"420","line":127,"column":14,"nodeType":"368","messageId":"369","endLine":127,"endColumn":29},{"ruleId":"393","severity":1,"message":"397","line":135,"column":107,"nodeType":"395","messageId":"402","endLine":135,"endColumn":109},{"ruleId":"393","severity":1,"message":"397","line":136,"column":75,"nodeType":"395","messageId":"402","endLine":136,"endColumn":77},{"ruleId":"393","severity":1,"message":"394","line":35,"column":59,"nodeType":"395","messageId":"396","endLine":35,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":39,"column":17,"nodeType":"398","messageId":"399","endLine":39,"endColumn":25},{"ruleId":"366","severity":1,"message":"421","line":173,"column":17,"nodeType":"368","messageId":"369","endLine":173,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":174,"column":17,"nodeType":"368","messageId":"369","endLine":174,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":175,"column":17,"nodeType":"368","messageId":"369","endLine":175,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":185,"column":68,"nodeType":"395","messageId":"402","endLine":185,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":192,"column":39,"nodeType":"368","messageId":"369","endLine":192,"endColumn":63},{"ruleId":"425","severity":1,"message":"426","line":247,"column":58,"nodeType":"427","messageId":"428","endLine":247,"endColumn":60},{"ruleId":"384","severity":1,"message":"429","line":313,"column":12,"nodeType":"386","endLine":313,"endColumn":44,"suggestions":"430"},{"ruleId":"366","severity":1,"message":"431","line":2,"column":31,"nodeType":"368","messageId":"369","endLine":2,"endColumn":37},{"ruleId":"366","severity":1,"message":"432","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":16},{"ruleId":"366","severity":1,"message":"433","line":3,"column":18,"nodeType":"368","messageId":"369","endLine":3,"endColumn":29},{"ruleId":"366","severity":1,"message":"434","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":36,"column":59,"nodeType":"395","messageId":"396","endLine":36,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":40,"column":17,"nodeType":"398","messageId":"399","endLine":40,"endColumn":24},{"ruleId":"366","severity":1,"message":"435","line":143,"column":14,"nodeType":"368","messageId":"369","endLine":143,"endColumn":38},{"ruleId":"366","severity":1,"message":"421","line":219,"column":17,"nodeType":"368","messageId":"369","endLine":219,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":220,"column":17,"nodeType":"368","messageId":"369","endLine":220,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":221,"column":17,"nodeType":"368","messageId":"369","endLine":221,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":231,"column":68,"nodeType":"395","messageId":"402","endLine":231,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":238,"column":39,"nodeType":"368","messageId":"369","endLine":238,"endColumn":63},{"ruleId":"425","severity":1,"message":"426","line":306,"column":58,"nodeType":"427","messageId":"428","endLine":306,"endColumn":60},{"ruleId":"384","severity":1,"message":"436","line":489,"column":12,"nodeType":"386","endLine":489,"endColumn":31,"suggestions":"437"},{"ruleId":"393","severity":1,"message":"394","line":34,"column":59,"nodeType":"395","messageId":"396","endLine":34,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":38,"column":17,"nodeType":"398","messageId":"399","endLine":38,"endColumn":24},{"ruleId":"366","severity":1,"message":"438","line":139,"column":37,"nodeType":"368","messageId":"369","endLine":139,"endColumn":63},{"ruleId":"393","severity":1,"message":"397","line":189,"column":68,"nodeType":"395","messageId":"402","endLine":189,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":196,"column":39,"nodeType":"368","messageId":"369","endLine":196,"endColumn":63},{"ruleId":"384","severity":1,"message":"439","line":299,"column":12,"nodeType":"386","endLine":299,"endColumn":22,"suggestions":"440"},{"ruleId":"384","severity":1,"message":"441","line":108,"column":12,"nodeType":"386","endLine":108,"endColumn":29,"suggestions":"442"},{"ruleId":"366","severity":1,"message":"431","line":2,"column":31,"nodeType":"368","messageId":"369","endLine":2,"endColumn":37},{"ruleId":"366","severity":1,"message":"432","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":16},{"ruleId":"366","severity":1,"message":"433","line":3,"column":18,"nodeType":"368","messageId":"369","endLine":3,"endColumn":29},{"ruleId":"366","severity":1,"message":"434","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":41,"column":59,"nodeType":"395","messageId":"396","endLine":41,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":45,"column":17,"nodeType":"398","messageId":"399","endLine":45,"endColumn":24},{"ruleId":"366","severity":1,"message":"421","line":193,"column":17,"nodeType":"368","messageId":"369","endLine":193,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":194,"column":17,"nodeType":"368","messageId":"369","endLine":194,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":195,"column":17,"nodeType":"368","messageId":"369","endLine":195,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":205,"column":68,"nodeType":"395","messageId":"402","endLine":205,"endColumn":70},{"ruleId":"393","severity":1,"message":"397","line":371,"column":68,"nodeType":"395","messageId":"402","endLine":371,"endColumn":70},{"ruleId":"393","severity":1,"message":"397","line":513,"column":60,"nodeType":"395","messageId":"402","endLine":513,"endColumn":62},{"ruleId":"366","severity":1,"message":"421","line":590,"column":17,"nodeType":"368","messageId":"369","endLine":590,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":591,"column":17,"nodeType":"368","messageId":"369","endLine":591,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":592,"column":17,"nodeType":"368","messageId":"369","endLine":592,"endColumn":24},{"ruleId":"425","severity":1,"message":"426","line":891,"column":58,"nodeType":"427","messageId":"428","endLine":891,"endColumn":60},{"ruleId":"384","severity":1,"message":"443","line":1082,"column":12,"nodeType":"386","endLine":1082,"endColumn":31,"suggestions":"444"},{"ruleId":"366","severity":1,"message":"367","line":8,"column":8,"nodeType":"368","messageId":"369","endLine":8,"endColumn":25},{"ruleId":"366","severity":1,"message":"370","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":32},{"ruleId":"366","severity":1,"message":"371","line":11,"column":8,"nodeType":"368","messageId":"369","endLine":11,"endColumn":22},{"ruleId":"366","severity":1,"message":"372","line":12,"column":8,"nodeType":"368","messageId":"369","endLine":12,"endColumn":12},{"ruleId":"366","severity":1,"message":"373","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":38},{"ruleId":"366","severity":1,"message":"374","line":14,"column":8,"nodeType":"368","messageId":"369","endLine":14,"endColumn":41},{"ruleId":"366","severity":1,"message":"375","line":16,"column":8,"nodeType":"368","messageId":"369","endLine":16,"endColumn":33},{"ruleId":"366","severity":1,"message":"376","line":24,"column":9,"nodeType":"368","messageId":"369","endLine":24,"endColumn":26},{"ruleId":"366","severity":1,"message":"377","line":28,"column":10,"nodeType":"368","messageId":"369","endLine":28,"endColumn":26},{"ruleId":"366","severity":1,"message":"378","line":28,"column":28,"nodeType":"368","messageId":"369","endLine":28,"endColumn":47},{"ruleId":"379","severity":1,"message":"380","line":61,"column":9,"nodeType":"381","messageId":"382","endLine":61,"endColumn":117},{"ruleId":"366","severity":1,"message":"413","line":9,"column":12,"nodeType":"368","messageId":"369","endLine":9,"endColumn":31},{"ruleId":"414","severity":1,"message":"415","line":9,"column":67,"nodeType":"416","messageId":"417","endLine":9,"endColumn":79},{"ruleId":"414","severity":1,"message":"415","line":15,"column":93,"nodeType":"416","messageId":"417","endLine":15,"endColumn":105},{"ruleId":"414","severity":1,"message":"415","line":26,"column":26,"nodeType":"416","messageId":"417","endLine":26,"endColumn":38},{"ruleId":"393","severity":1,"message":"397","line":27,"column":81,"nodeType":"395","messageId":"402","endLine":27,"endColumn":83},{"ruleId":"393","severity":1,"message":"397","line":28,"column":80,"nodeType":"395","messageId":"402","endLine":28,"endColumn":82},{"ruleId":"393","severity":1,"message":"397","line":30,"column":65,"nodeType":"395","messageId":"402","endLine":30,"endColumn":67},{"ruleId":"393","severity":1,"message":"397","line":67,"column":81,"nodeType":"395","messageId":"402","endLine":67,"endColumn":83},{"ruleId":"393","severity":1,"message":"397","line":68,"column":80,"nodeType":"395","messageId":"402","endLine":68,"endColumn":82},{"ruleId":"414","severity":1,"message":"415","line":83,"column":81,"nodeType":"416","messageId":"417","endLine":83,"endColumn":93},{"ruleId":"418","severity":1,"message":"419","line":84,"column":95,"nodeType":"416","messageId":"417","endLine":84,"endColumn":106},{"ruleId":"418","severity":1,"message":"419","line":85,"column":98,"nodeType":"416","messageId":"417","endLine":85,"endColumn":109},{"ruleId":"418","severity":1,"message":"419","line":86,"column":96,"nodeType":"416","messageId":"417","endLine":86,"endColumn":107},{"ruleId":"418","severity":1,"message":"419","line":87,"column":97,"nodeType":"416","messageId":"417","endLine":87,"endColumn":108},{"ruleId":"418","severity":1,"message":"419","line":88,"column":97,"nodeType":"416","messageId":"417","endLine":88,"endColumn":108},{"ruleId":"366","severity":1,"message":"420","line":127,"column":14,"nodeType":"368","messageId":"369","endLine":127,"endColumn":29},{"ruleId":"393","severity":1,"message":"397","line":135,"column":107,"nodeType":"395","messageId":"402","endLine":135,"endColumn":109},{"ruleId":"393","severity":1,"message":"397","line":136,"column":75,"nodeType":"395","messageId":"402","endLine":136,"endColumn":77},{"ruleId":"384","severity":1,"message":"388","line":71,"column":10,"nodeType":"386","endLine":71,"endColumn":22,"suggestions":"445"},{"ruleId":"390","severity":1,"message":"391","line":86,"column":29,"nodeType":"392","endLine":86,"endColumn":59},{"ruleId":"366","severity":1,"message":"431","line":2,"column":31,"nodeType":"368","messageId":"369","endLine":2,"endColumn":37},{"ruleId":"366","severity":1,"message":"432","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":16},{"ruleId":"366","severity":1,"message":"433","line":3,"column":18,"nodeType":"368","messageId":"369","endLine":3,"endColumn":29},{"ruleId":"366","severity":1,"message":"434","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":36,"column":59,"nodeType":"395","messageId":"396","endLine":36,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":40,"column":17,"nodeType":"398","messageId":"399","endLine":40,"endColumn":24},{"ruleId":"366","severity":1,"message":"435","line":143,"column":14,"nodeType":"368","messageId":"369","endLine":143,"endColumn":38},{"ruleId":"366","severity":1,"message":"421","line":219,"column":17,"nodeType":"368","messageId":"369","endLine":219,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":220,"column":17,"nodeType":"368","messageId":"369","endLine":220,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":221,"column":17,"nodeType":"368","messageId":"369","endLine":221,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":231,"column":68,"nodeType":"395","messageId":"402","endLine":231,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":238,"column":39,"nodeType":"368","messageId":"369","endLine":238,"endColumn":63},{"ruleId":"425","severity":1,"message":"426","line":306,"column":58,"nodeType":"427","messageId":"428","endLine":306,"endColumn":60},{"ruleId":"384","severity":1,"message":"436","line":489,"column":12,"nodeType":"386","endLine":489,"endColumn":31,"suggestions":"446"},{"ruleId":"393","severity":1,"message":"394","line":35,"column":59,"nodeType":"395","messageId":"396","endLine":35,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":39,"column":17,"nodeType":"398","messageId":"399","endLine":39,"endColumn":25},{"ruleId":"366","severity":1,"message":"421","line":173,"column":17,"nodeType":"368","messageId":"369","endLine":173,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":174,"column":17,"nodeType":"368","messageId":"369","endLine":174,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":175,"column":17,"nodeType":"368","messageId":"369","endLine":175,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":185,"column":68,"nodeType":"395","messageId":"402","endLine":185,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":192,"column":39,"nodeType":"368","messageId":"369","endLine":192,"endColumn":63},{"ruleId":"425","severity":1,"message":"426","line":247,"column":58,"nodeType":"427","messageId":"428","endLine":247,"endColumn":60},{"ruleId":"384","severity":1,"message":"429","line":313,"column":12,"nodeType":"386","endLine":313,"endColumn":44,"suggestions":"447"},{"ruleId":"393","severity":1,"message":"397","line":76,"column":79,"nodeType":"395","messageId":"402","endLine":76,"endColumn":81},{"ruleId":"393","severity":1,"message":"397","line":77,"column":131,"nodeType":"395","messageId":"402","endLine":77,"endColumn":133},{"ruleId":"384","severity":1,"message":"403","line":85,"column":8,"nodeType":"386","endLine":85,"endColumn":21,"suggestions":"448"},{"ruleId":"393","severity":1,"message":"394","line":101,"column":45,"nodeType":"395","messageId":"396","endLine":101,"endColumn":47},{"ruleId":"393","severity":1,"message":"397","line":165,"column":64,"nodeType":"395","messageId":"402","endLine":165,"endColumn":66},{"ruleId":"405","severity":1,"message":"406","line":220,"column":17,"nodeType":"407","messageId":"408","endLine":222,"endColumn":45,"fix":"449"},{"ruleId":"405","severity":1,"message":"410","line":266,"column":17,"nodeType":"407","messageId":"408","endLine":266,"endColumn":45,"fix":"450"},{"ruleId":"393","severity":1,"message":"394","line":34,"column":59,"nodeType":"395","messageId":"396","endLine":34,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":38,"column":17,"nodeType":"398","messageId":"399","endLine":38,"endColumn":24},{"ruleId":"366","severity":1,"message":"438","line":139,"column":37,"nodeType":"368","messageId":"369","endLine":139,"endColumn":63},{"ruleId":"393","severity":1,"message":"397","line":189,"column":68,"nodeType":"395","messageId":"402","endLine":189,"endColumn":70},{"ruleId":"366","severity":1,"message":"424","line":196,"column":39,"nodeType":"368","messageId":"369","endLine":196,"endColumn":63},{"ruleId":"384","severity":1,"message":"439","line":299,"column":12,"nodeType":"386","endLine":299,"endColumn":22,"suggestions":"451"},{"ruleId":"393","severity":1,"message":"394","line":38,"column":59,"nodeType":"395","messageId":"396","endLine":38,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":42,"column":17,"nodeType":"398","messageId":"399","endLine":42,"endColumn":24},{"ruleId":"384","severity":1,"message":"400","line":168,"column":9,"nodeType":"386","endLine":168,"endColumn":24,"suggestions":"452"},{"ruleId":"366","severity":1,"message":"431","line":2,"column":31,"nodeType":"368","messageId":"369","endLine":2,"endColumn":37},{"ruleId":"366","severity":1,"message":"432","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":16},{"ruleId":"366","severity":1,"message":"433","line":3,"column":18,"nodeType":"368","messageId":"369","endLine":3,"endColumn":29},{"ruleId":"366","severity":1,"message":"434","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":41,"column":59,"nodeType":"395","messageId":"396","endLine":41,"endColumn":61},{"ruleId":"393","severity":1,"message":"397","line":45,"column":17,"nodeType":"398","messageId":"399","endLine":45,"endColumn":24},{"ruleId":"366","severity":1,"message":"421","line":193,"column":17,"nodeType":"368","messageId":"369","endLine":193,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":194,"column":17,"nodeType":"368","messageId":"369","endLine":194,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":195,"column":17,"nodeType":"368","messageId":"369","endLine":195,"endColumn":24},{"ruleId":"393","severity":1,"message":"397","line":205,"column":68,"nodeType":"395","messageId":"402","endLine":205,"endColumn":70},{"ruleId":"393","severity":1,"message":"397","line":371,"column":68,"nodeType":"395","messageId":"402","endLine":371,"endColumn":70},{"ruleId":"393","severity":1,"message":"397","line":513,"column":60,"nodeType":"395","messageId":"402","endLine":513,"endColumn":62},{"ruleId":"366","severity":1,"message":"421","line":590,"column":17,"nodeType":"368","messageId":"369","endLine":590,"endColumn":25},{"ruleId":"366","severity":1,"message":"422","line":591,"column":17,"nodeType":"368","messageId":"369","endLine":591,"endColumn":27},{"ruleId":"366","severity":1,"message":"423","line":592,"column":17,"nodeType":"368","messageId":"369","endLine":592,"endColumn":24},{"ruleId":"425","severity":1,"message":"426","line":891,"column":58,"nodeType":"427","messageId":"428","endLine":891,"endColumn":60},{"ruleId":"384","severity":1,"message":"443","line":1082,"column":12,"nodeType":"386","endLine":1082,"endColumn":31,"suggestions":"453"},{"ruleId":"384","severity":1,"message":"441","line":108,"column":12,"nodeType":"386","endLine":108,"endColumn":29,"suggestions":"454"},{"ruleId":"384","severity":1,"message":"400","line":105,"column":9,"nodeType":"386","endLine":105,"endColumn":28,"suggestions":"455"},"no-unused-vars","'EndpointsCheckBox' is defined but never used.","Identifier","unusedVar","'LinkedSearchVarTableList' is defined but never used.","'NetworkDiagram' is defined but never used.","'data' is defined but never used.","'DatasetDiscoveryExplainedGraph' is defined but never used.","'DatasetDiscoveryExplainedSVGGraph' is defined but never used.","'ExplainedDatasetDiscovery' is defined but never used.","'rdf4jRepositories' is assigned a value but never used.","'linkedConceptMap' is assigned a value but never used.","'setLinkedConceptMap' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component DatasetDiscoveryExplainedSVGGraph_v2 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'resp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData' and 'queryTxt'. Either include them or remove the dependency array.","ArrayExpression",["456"],"React Hook useEffect has a missing dependency: 'fetchStoredLabels'. Either include it or remove the dependency array.",["457"],"jsx-a11y/aria-props","aria-aria-label: This attribute is an invalid ARIA attribute.","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["458"],"expectedInside","React Hook useEffect has missing dependencies: 'endpoints' and 'fetchLinkedConcepts'. Either include them or remove the dependency array.",["459"],"no-useless-computed-key","Unnecessarily computed property ['enabledPropertyCategories'] found.","Property","unnecessarilyComputedProperty",{"range":"460","text":"461"},"Unnecessarily computed property ['enabledEndpoint'] found.",{"range":"462","text":"463"},["464"],"'linkedSearchPathMap' is assigned a value but never used.","no-new-object","The object literal notation {} is preferable.","NewExpression","preferLiteral","no-array-constructor","The array literal notation [] is preferable.","'getTargetLabels' is defined but never used.","'subjects' is assigned a value but never used.","'properties' is assigned a value but never used.","'objects' is assigned a value but never used.","'litMentioningSearchLabel' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currentExlainedTerm' and 'explainDatasetsFromDescAndTitle'. Either include them or remove the dependency array.",["465"],"'useRef' is defined but never used.","'RADIUS' is defined but never used.","'drawNetwork' is defined but never used.","'ForceUndirectedD3Graph' is defined but never used.","'xQueryDatasetsFromObsCol' is defined but never used.","React Hook useEffect has missing dependencies: 'currentlyExplainedTerm', 'currentlyVisualisedTerm', 'explainDatasetsFromDescAndTitle', 'height', and 'width'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentlyVisualisedTerm' needs the current value of 'currentlyExplainedTerm'.",["466"],"'setCurrentlyVisualisedTerm' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentlyExlainedTerm', 'currentlyVisualisedTerm', 'd3Graph', and 'explainDatasetsFromDescAndTitle'. Either include them or remove the dependency array.",["467"],"React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["468"],"React Hook useEffect has missing dependencies: 'currentlyExplainedTerm', 'currentlyVisualisedTerm', 'explainDatasets', 'height', and 'width'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentlyVisualisedTerm' needs the current value of 'currentlyExplainedTerm'.",["469"],["470"],["471"],["472"],["473"],{"range":"474","text":"461"},{"range":"475","text":"463"},["476"],["477"],["478"],["479"],["480"],{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},[8237,8266],"'enabledPropertyCategories'",[9720,9739],"'enabledEndpoint'",{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"483","fix":"501"},{"desc":"493","fix":"502"},{"desc":"491","fix":"503"},{"desc":"487","fix":"504"},[8237,8266],[9720,9739],{"desc":"495","fix":"505"},{"desc":"485","fix":"506"},{"desc":"499","fix":"507"},{"desc":"497","fix":"508"},{"desc":"489","fix":"509"},"Update the dependencies array to be: [fetchData, queryTxt]",{"range":"510","text":"511"},"Update the dependencies array to be: [dataLoaded, fetchStoredLabels]",{"range":"512","text":"513"},"Update the dependencies array to be: [fetchData, selectedLabel]",{"range":"514","text":"515"},"Update the dependencies array to be: [endpoints, fetchLinkedConcepts, searchLabel]",{"range":"516","text":"517"},"Update the dependencies array to be: [fetchData, linkedSearchLabel]",{"range":"518","text":"519"},"Update the dependencies array to be: [width, height, termInfo, d3Graph, currentExlainedTerm, explainDatasetsFromDescAndTitle]",{"range":"520","text":"521"},"Update the dependencies array to be: [termInfo, d3Graph, currentlyExplainedTerm, currentlyVisualisedTerm, explainDatasetsFromDescAndTitle, width, height]",{"range":"522","text":"523"},"Update the dependencies array to be: [currentlyExlainedTerm, currentlyVisualisedTerm, d3Graph, explainDatasetsFromDescAndTitle, termInfo]",{"range":"524","text":"525"},"Update the dependencies array to be: [graphId, d3Graph, width, height]",{"range":"526","text":"527"},"Update the dependencies array to be: [termInfo, d3Graph, currentlyExplainedTerm, currentlyVisualisedTerm, explainDatasets, width, height]",{"range":"528","text":"529"},{"range":"530","text":"513"},{"range":"531","text":"523"},{"range":"532","text":"521"},{"range":"533","text":"517"},{"range":"534","text":"525"},{"range":"535","text":"515"},{"range":"536","text":"529"},{"range":"537","text":"527"},{"range":"538","text":"519"},[2593,2595],"[fetchData, queryTxt]",[2187,2199],"[dataLoaded, fetchStoredLabels]",[5875,5890],"[fetchData, selectedLabel]",[2630,2643],"[endpoints, fetchLinkedConcepts, searchLabel]",[3675,3694],"[fetchData, linkedSearchLabel]",[10960,10992],"[width, height, termInfo, d3Graph, currentExlainedTerm, explainDatasetsFromDescAndTitle]",[17249,17268],"[termInfo, d3Graph, currentlyExplainedTerm, currentlyVisualisedTerm, explainDatasetsFromDescAndTitle, width, height]",[9725,9735],"[currentlyExlainedTerm, currentlyVisualisedTerm, d3Graph, explainDatasetsFromDescAndTitle, termInfo]",[4482,4499],"[graphId, d3Graph, width, height]",[44989,45008],"[termInfo, d3Graph, currentlyExplainedTerm, currentlyVisualisedTerm, explainDatasets, width, height]",[2187,2199],[17249,17268],[10960,10992],[2630,2643],[9725,9735],[5875,5890],[44989,45008],[4482,4499],[3675,3694]]