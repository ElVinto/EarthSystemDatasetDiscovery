{"ast":null,"code":"import _objectSpread from\"/home/vincentarmant/workspace/nodejs/react-restapi-call/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as d3 from'd3';import{useEffect,useRef}from'react';import{RADIUS,drawNetwork}from'./drawNetwork';// import { Data, Link, Node } from './data';\nimport React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export default function NetworkDiagram(_ref){var width=_ref.width,height=_ref.height,data=_ref.data;// The force simulation mutates links and nodes, so create a copy first\n// Node positions are initialized by d3\nvar links=data.links.map(function(d){return _objectSpread({},d);});var nodes=data.nodes.map(function(d){return _objectSpread({},d);});var canvasRef=useRef(null);useEffect(function(){// set dimension of the canvas element\nvar canvas=canvasRef.current;var context=canvas===null||canvas===void 0?void 0:canvas.getContext('2d');if(!context){return;}// run d3-force to find the position of nodes on the canvas\nd3.forceSimulation(nodes)// list of forces we apply to get node positions\n.force('link',d3.forceLink(links).id(function(d){return d.id;})).force('collide',d3.forceCollide().radius(RADIUS)).force('charge',d3.forceManyBody()).force('center',d3.forceCenter(width/2,height/2))// at each iteration of the simulation, draw the network diagram with the new node positions\n.on('tick',function(){drawNetwork(context,width,height,nodes,links);});},[width,height,nodes,links]);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{width:width,height:height},width:width,height:height})});};","map":{"version":3,"names":["d3","useEffect","useRef","RADIUS","drawNetwork","React","jsx","_jsx","NetworkDiagram","_ref","width","height","data","links","map","d","_objectSpread","nodes","canvasRef","canvas","current","context","getContext","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","on","children","ref","style"],"sources":["/home/vincentarmant/workspace/nodejs/react-restapi-call/src/examples/react-graph-gallery/NetworkDiagramBasicCanvas/NetworkDiagram.jsx"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport { RADIUS, drawNetwork } from './drawNetwork';\n// import { Data, Link, Node } from './data';\nimport React from 'react';\n\n\n\nexport default function NetworkDiagram ({\n  width,\n  height,\n  data,\n}) {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const links= data.links.map((d) => ({ ...d }));\n  const nodes= data.nodes.map((d) => ({ ...d }));\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        drawNetwork(context, width, height, nodes, links);\n      });\n  }, [width, height, nodes, links]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        style={{\n          width,\n          height,\n        }}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n};\n"],"mappings":"4IAAA,MAAO,GAAK,CAAAA,EAAE,KAAM,IAAI,CACxB,OAASC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACzC,OAASC,MAAM,CAAEC,WAAW,KAAQ,eAAe,CACnD;AACA,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAI1B,cAAe,SAAS,CAAAC,cAAcA,CAAAC,IAAA,CAInC,IAHD,CAAAC,KAAK,CAAAD,IAAA,CAALC,KAAK,CACLC,MAAM,CAAAF,IAAA,CAANE,MAAM,CACNC,IAAI,CAAAH,IAAA,CAAJG,IAAI,CAEJ;AACA;AACA,GAAM,CAAAC,KAAK,CAAED,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,SAACC,CAAC,SAAAC,aAAA,IAAWD,CAAC,GAAG,CAAC,CAC9C,GAAM,CAAAE,KAAK,CAAEL,IAAI,CAACK,KAAK,CAACH,GAAG,CAAC,SAACC,CAAC,SAAAC,aAAA,IAAWD,CAAC,GAAG,CAAC,CAE9C,GAAM,CAAAG,SAAS,CAAGhB,MAAM,CAAC,IAAI,CAAC,CAE9BD,SAAS,CAAC,UAAM,CACd;AACA,GAAM,CAAAkB,MAAM,CAAGD,SAAS,CAACE,OAAO,CAChC,GAAM,CAAAC,OAAO,CAAGF,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC,CAExC,GAAI,CAACD,OAAO,CAAE,CACZ,OACF,CAEA;AACArB,EAAE,CAACuB,eAAe,CAACN,KAAK,CAEtB;AAAA,CACCO,KAAK,CACJ,MAAM,CACNxB,EAAE,CAACyB,SAAS,CAACZ,KAAK,CAAC,CAACa,EAAE,CAAC,SAACX,CAAC,QAAK,CAAAA,CAAC,CAACW,EAAE,GACpC,CAAC,CACAF,KAAK,CAAC,SAAS,CAAExB,EAAE,CAAC2B,YAAY,CAAC,CAAC,CAACC,MAAM,CAACzB,MAAM,CAAC,CAAC,CAClDqB,KAAK,CAAC,QAAQ,CAAExB,EAAE,CAAC6B,aAAa,CAAC,CAAC,CAAC,CACnCL,KAAK,CAAC,QAAQ,CAAExB,EAAE,CAAC8B,WAAW,CAACpB,KAAK,CAAG,CAAC,CAAEC,MAAM,CAAG,CAAC,CAAC,CAEtD;AAAA,CACCoB,EAAE,CAAC,MAAM,CAAE,UAAM,CAChB3B,WAAW,CAACiB,OAAO,CAAEX,KAAK,CAAEC,MAAM,CAAEM,KAAK,CAAEJ,KAAK,CAAC,CACnD,CAAC,CAAC,CACN,CAAC,CAAE,CAACH,KAAK,CAAEC,MAAM,CAAEM,KAAK,CAAEJ,KAAK,CAAC,CAAC,CAEjC,mBACEN,IAAA,QAAAyB,QAAA,cACEzB,IAAA,WACE0B,GAAG,CAAEf,SAAU,CACfgB,KAAK,CAAE,CACLxB,KAAK,CAALA,KAAK,CACLC,MAAM,CAANA,MACF,CAAE,CACFD,KAAK,CAAEA,KAAM,CACbC,MAAM,CAAEA,MAAO,CAChB,CAAC,CACC,CAAC,CAEV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}